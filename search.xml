<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>writeup_梅津美治郎reserve</title>
      <link href="/2022/02/22/writeup_%E6%A2%85%E6%B4%A5%E7%BE%8E%E6%B2%BB%E9%83%8Ereserve/"/>
      <url>/2022/02/22/writeup_%E6%A2%85%E6%B4%A5%E7%BE%8E%E6%B2%BB%E9%83%8Ereserve/</url>
      
        <content type="html"><![CDATA[<h1 id="writeup-梅津美治郎reserve"><a href="#writeup-梅津美治郎reserve" class="headerlink" title="writeup_梅津美治郎reserve"></a>writeup_梅津美治郎reserve</h1><p>查壳，没壳</p><p>ida打开：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222144540525.png" alt="image-20220222144540525"></p><p>level1太简单不说，r0b0RUlez！</p><p>直接，步入<code>sub_4015EA</code></p><p>发现有一个九次的小递归：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222144708771.png" alt="image-20220222144708771"></p><p>判断有猫腻，直接上动调，然而x32dbg怎么调都是一个异常终止。</p><p>查wp，改用虚拟机下的od，可以正常运行，简单的概述一下具体情况：</p><p>在运行完<code>int3</code>语句后，程序跳转到7地址开头系统领空，一段时间后，再次调用了4开头的正常函数，可以猜到应该是level2的主函数：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222145151675.png" alt="image-20220222145151675"></p><p>逻辑很简单：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222145245355.png" alt="image-20220222145245355"></p><p>直接比较了v1和另一串字符。</p><p>打开比较函数：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222145347133.png" alt="image-20220222145347133"></p><p>可以看到是将a2异或2后进行的比较，至此比较流程已经清晰，下面找到a2就可以解决问题。</p><p>依然需要动调：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222145635117.png" alt="image-20220222145635117"></p><p>可以看到数据窗口中显示的就是实际参与比较的a2字符串（以02结尾），我们直接解密：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220222150024397.png" alt="image-20220222150024397"></p><p>为welldone字样，然而这还不是最终flag。。。</p><p>最终的flag是第一层的结果下划线第二层的结果，即：</p><p>flag{r0b0RUlez!_w3lld0ne}</p><p>坑爹啊。。。</p>]]></content>
      
      
      <categories>
          
          <category> reverse </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>writeup_攻防世界_WindowsReserve2</title>
      <link href="/2022/02/21/writeup_%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_WindowsReserve2/"/>
      <url>/2022/02/21/writeup_%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_WindowsReserve2/</url>
      
        <content type="html"><![CDATA[<h1 id="writeup-攻防世界-WindowsReserve2"><a href="#writeup-攻防世界-WindowsReserve2" class="headerlink" title="writeup_攻防世界_WindowsReserve2"></a>writeup_攻防世界_WindowsReserve2</h1><p>首先，除了攻防世界的wp以外，网上关于这题的wp我个人都认为不太详细</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221154222199.png" alt="image-20220221154222199"></p><p>有as壳，esp定律手动脱壳。</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221154312611.png" alt="image-20220221154312611"></p><p>拖入ida，根据功能对函数进行重命名：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221155246072.png" alt="image-20220221155246072"></p><p>锁定关键函数：</p><p>①检查输入函数：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221155643676.png" alt="image-20220221155643676"></p><p>②加密函数：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221195502946.png" alt="image-20220221195502946"></p><p>最后一位通过v9和v4加密，存入了v10</p><p>进入下一层逻辑：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221213003126.png" alt="image-20220221213003126"></p><p>仔细观察逻辑发现有一个密码表，通过python脚本转化一下：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221212858274.png" alt="image-20220221212858274"></p><p>发现还是经典base64，仔细观察代码逻辑，推测是base64加密函数。</p><p>因此，可以对程序的总体流程进行推测：</p><ol><li>传入加密函数，分奇数偶数位进行加密</li><li>加密后的内容进行base64编码（结果为reverse+）</li></ol><p>然而，对reverse+进行解码却发现解不开。。。这应该是其解码之后的结果无法打印</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221215648947.png" alt="image-20220221215648947"></p><p>遂自己写脚本如上，左侧为输出。</p><p>然后回到上一层函数</p><p>上一层函数的输出为173,235,222,174,199,190</p><p>因此可以初步判断本层函数的输入应为12位，由于可能性较少，可以直接正向碰撞，可能性仅仅有12*（10+6）种，直接复刻正向逻辑：</p><p>首先，上面的一大串加密逻辑的输出结果只可能是整数0~15</p><p>然后使用0~15循环碰撞输出结果，得到的值进行保存，</p><p>最终将得到的含有0<del>15整数的12位数组反向转化为0</del>9、A~F即可</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220221222215169.png" alt="image-20220221222215169"></p><p>终于搞定了。。。</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>base64编码、解码c语言实现</title>
      <link href="/2022/02/21/base64%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/02/21/base64%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81%E7%9A%84c%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>搬运自：<a href="https://blog.csdn.net/qq_26093511/article/details/78836087">https://blog.csdn.net/qq_26093511/article/details/78836087</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base64_encode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *str)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">long</span> len;  </span><br><span class="line">    <span class="keyword">long</span> str_len;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res;  </span><br><span class="line">    <span class="keyword">int</span> i,j;  </span><br><span class="line"><span class="comment">//定义base64编码表  </span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *base64_table=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//计算经过base64编码后的字符串长度  </span></span><br><span class="line">    str_len=<span class="built_in">strlen</span>(str);  </span><br><span class="line">    <span class="keyword">if</span>(str_len % <span class="number">3</span> == <span class="number">0</span>)  </span><br><span class="line">        len=str_len/<span class="number">3</span>*<span class="number">4</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        len=(str_len/<span class="number">3</span>+<span class="number">1</span>)*<span class="number">4</span>;  </span><br><span class="line">  </span><br><span class="line">    res=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>)*len+<span class="number">1</span>);  </span><br><span class="line">    res[len]=<span class="string">&#x27;\0&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//以3个8位字符为一组进行编码  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;len<span class="number">-2</span>;j+=<span class="number">3</span>,i+=<span class="number">4</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        res[i]=base64_table[str[j]&gt;&gt;<span class="number">2</span>]; </span><br><span class="line"><span class="comment">//取出第一个字符的前6位并找出对应的结果字符  </span></span><br><span class="line">        res[i+<span class="number">1</span>]=base64_table[(str[j]&amp;<span class="number">0x3</span>)&lt;&lt;<span class="number">4</span> | (str[j+<span class="number">1</span>]&gt;&gt;<span class="number">4</span>)]; </span><br><span class="line"><span class="comment">//将第一个字符的后位与第二个字符的前4位进行组合并找到对应的结果字符  </span></span><br><span class="line">        res[i+<span class="number">2</span>]=base64_table[(str[j+<span class="number">1</span>]&amp;<span class="number">0xf</span>)&lt;&lt;<span class="number">2</span> | (str[j+<span class="number">2</span>]&gt;&gt;<span class="number">6</span>)]; </span><br><span class="line"><span class="comment">//将第二个字符的后4位与第三个字符的前2位组合并找出对应的结果字符  </span></span><br><span class="line">        res[i+<span class="number">3</span>]=base64_table[str[j+<span class="number">2</span>]&amp;<span class="number">0x3f</span>]; </span><br><span class="line"><span class="comment">//取出第三个字符的后6位并找出结果字符  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">switch</span>(str_len % <span class="number">3</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:  </span><br><span class="line">            res[i<span class="number">-2</span>]=<span class="string">&#x27;=&#x27;</span>;  </span><br><span class="line">            res[i<span class="number">-1</span>]=<span class="string">&#x27;=&#x27;</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:  </span><br><span class="line">            res[i<span class="number">-1</span>]=<span class="string">&#x27;=&#x27;</span>;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">base64_decode</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *code)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="comment">//根据base64表，以字符找到对应的十进制数据  </span></span><br><span class="line">    <span class="keyword">int</span> table[]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">62</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">63</span>,<span class="number">52</span>,<span class="number">53</span>,<span class="number">54</span>,<span class="number">55</span>,<span class="number">56</span>,<span class="number">57</span>,<span class="number">58</span>,</span><br><span class="line">     <span class="number">59</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">     <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,</span><br><span class="line">     <span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,</span><br><span class="line">     <span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">26</span>,</span><br><span class="line">     <span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,</span><br><span class="line">     <span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,</span><br><span class="line">     <span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span></span><br><span class="line">           &#125;;  </span><br><span class="line">    <span class="keyword">long</span> len;  </span><br><span class="line">    <span class="keyword">long</span> str_len;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *res;  </span><br><span class="line">    <span class="keyword">int</span> i,j;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//计算解码后的字符串长度  </span></span><br><span class="line">    len=<span class="built_in">strlen</span>(code);  </span><br><span class="line"><span class="comment">//判断编码后的字符串后是否有=  </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strstr</span>(code,<span class="string">&quot;==&quot;</span>))  </span><br><span class="line">        str_len=len/<span class="number">4</span>*<span class="number">3</span><span class="number">-2</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strstr</span>(code,<span class="string">&quot;=&quot;</span>))  </span><br><span class="line">        str_len=len/<span class="number">4</span>*<span class="number">3</span><span class="number">-1</span>;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        str_len=len/<span class="number">4</span>*<span class="number">3</span>;  </span><br><span class="line">  </span><br><span class="line">    res=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>)*str_len+<span class="number">1</span>);  </span><br><span class="line">    res[str_len]=<span class="string">&#x27;\0&#x27;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//以4个字符为一位进行解码  </span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>;i &lt; len<span class="number">-2</span>;j+=<span class="number">3</span>,i+=<span class="number">4</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        res[j]=((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i]])&lt;&lt;<span class="number">2</span> | (((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i+<span class="number">1</span>]])&gt;&gt;<span class="number">4</span>); </span><br><span class="line"><span class="comment">//取出第一个字符对应base64表的十进制数的前6位与第二个字符对应base64表的十进制数的后2位进行组合  </span></span><br><span class="line">        res[j+<span class="number">1</span>]=(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i+<span class="number">1</span>]])&lt;&lt;<span class="number">4</span>) | (((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i+<span class="number">2</span>]])&gt;&gt;<span class="number">2</span>); </span><br><span class="line"><span class="comment">//取出第二个字符对应base64表的十进制数的后4位与第三个字符对应bas464表的十进制数的后4位进行组合  </span></span><br><span class="line">        res[j+<span class="number">2</span>]=(((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i+<span class="number">2</span>]])&lt;&lt;<span class="number">6</span>) | ((<span class="keyword">unsigned</span> <span class="keyword">char</span>)table[code[i+<span class="number">3</span>]]); </span><br><span class="line"><span class="comment">//取出第三个字符对应base64表的十进制数的后2位与第4个字符进行组合  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="number">1</span>],<span class="string">&quot;-d&quot;</span>) == <span class="number">0</span>) </span><br><span class="line">    &#123; </span><br><span class="line">buf = base64_decode(argv[<span class="number">2</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf);  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;</span><br><span class="line">buf = base64_encode(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf);   </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python_re爬虫模块（RE、BS4、Xpath）</title>
      <link href="/2022/02/20/python_re%E6%A8%A1%E5%9D%97/"/>
      <url>/2022/02/20/python_re%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="python爬虫模块（RE、BS4、Xpath）"><a href="#python爬虫模块（RE、BS4、Xpath）" class="headerlink" title="python爬虫模块（RE、BS4、Xpath）"></a>python爬虫模块（RE、BS4、Xpath）</h1><h2 id="一、RE模块"><a href="#一、RE模块" class="headerlink" title="一、RE模块"></a>一、RE模块</h2><h3 id="基本使用："><a href="#基本使用：" class="headerlink" title="基本使用："></a>基本使用：</h3><p><code>findall</code>：匹配字符串中所有符合正则的内容</p><p><code>finditer</code>：匹配内容后返回迭代器，从迭代器中取数据可以用循环加<code>.group()</code></p><p><code>search</code>：找到一个结果就返回，返回的结果是match对象，取数据可以用<code>.group()</code></p><p><code>match</code>：从头开始匹配，从第一个字母匹配不到就没有（不常用）</p><p><strong>其中，上述内容的调用通过</strong>：<br>    <code>ret=re.findall(r&#39;正则串&#39;,&#39;匹配目标串&#39;)</code>实现调用。</p><h3 id="预加载："><a href="#预加载：" class="headerlink" title="预加载："></a>预加载：</h3><p><em>预加载正则表达式</em><br>（用于正则表达式较长、且多次使用时的封装）</p><p>格式为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">ret = obj.finditer(<span class="string">&quot;目标字串666&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(it.group())</span><br></pre></td></tr></table></figure><h3 id="内容提取："><a href="#内容提取：" class="headerlink" title="内容提取："></a>内容提取：</h3><p>​    正则可以用来匹配固定格式的一串字符串，如<code>&lt;html&gt;xxx&lt;html&gt;</code>，然而当我们不想要两侧的<html>，只想要xxx时，需要从正则中取出不重复信息，即内容提取。</p><p>举例说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;aa&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;qwe&lt;/span&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;bb&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;qwer&lt;/span&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;cc&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;qwert&lt;/span&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;dd&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;qwerty&lt;/span&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;ee&#x27;&gt;&lt;span id=&#x27;5&#x27;&gt;qwertyu&lt;span&gt;&lt;div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#原匹配方式</span></span><br><span class="line"><span class="comment">#obj = re.compile(r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&#x27;\d+&#x27;&gt;.*?&lt;/span&gt;&lt;div&gt;&quot;,re.S)</span></span><br><span class="line"><span class="comment"># re.S :让.可以匹配换行符</span></span><br><span class="line"></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class=&#x27;(?p&lt;name1&gt;.*?)&#x27;&gt;&lt;span id=&#x27;(?P&lt;name2&gt;\d+)&#x27;&gt;(?P&lt;name3&gt;.*？)&lt;/span&gt;&lt;div&gt;&quot;</span>,re.S)</span><br><span class="line">result = obj.finditer(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&#x27;name1&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&#x27;name2&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&#x27;name3&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>即，使用<code>(?P&lt;分组名字&gt;原来正则)</code>从正则匹配的内容中进一步提取内容。</p><h2 id="二、BS4模块"><a href="#二、BS4模块" class="headerlink" title="二、BS4模块"></a>二、BS4模块</h2><h3 id="引入方式："><a href="#引入方式：" class="headerlink" title="引入方式："></a>引入方式：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><h3 id="使用方式-以抓取表格为例）："><a href="#使用方式-以抓取表格为例）：" class="headerlink" title="使用方式(以抓取表格为例）："></a>使用方式(以抓取表格为例）：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 拿到页面源代码</span></span><br><span class="line"><span class="comment"># 2. 使用bs4进行解析. 拿到数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.xxx.com/a.html&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line"><span class="comment"># 1. 把页面源代码交给BeautifulSoup进行处理, 生成bs对象</span></span><br><span class="line">page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 指定html解析器</span></span><br><span class="line"><span class="comment"># 2. 从bs对象中查找数据</span></span><br><span class="line"><span class="comment"># find(标签, 属性=值)</span></span><br><span class="line"><span class="comment"># find_all(标签, 属性=值)</span></span><br><span class="line">table = page.find(<span class="string">&quot;table&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;hq_table&quot;</span>&#125;)</span><br><span class="line">trs = table.find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">1</span>:]</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:  <span class="comment"># 每一行</span></span><br><span class="line">    target_1 = tr.find_all(<span class="string">&quot;td&quot;</span>)  <span class="comment"># 拿到每行中的所有td</span></span><br><span class="line">    target_2 = tds[<span class="number">0</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_3 = tds[<span class="number">1</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_4 = tds[<span class="number">2</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_5 = tds[<span class="number">3</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_6 = tds[<span class="number">4</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_7 = tds[<span class="number">5</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    target_8 = tds[<span class="number">6</span>].text  <span class="comment"># .text 表示拿到被标签标记的内容</span></span><br><span class="line">    <span class="built_in">print</span>(name, low, avg, high, gui, kind, date)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over!&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="核心方法："><a href="#核心方法：" class="headerlink" title="核心方法："></a>核心方法：</h3><p><code>find(标签, 属性=值)</code></p><p><code>find_all(标签, 属性=值)</code></p><p>​    按照次序填写要找的标签名和属性名即可。其中，标签名的传参为<strong>字符串</strong>，属性名由于<code>class、id</code>等是python的关键字，可以使用<code>attrs=&#123;键值对&#125;</code>来代替，键值对的键和值均为<strong>字符串</strong>。</p><h2 id="三、Xpath模块"><a href="#三、Xpath模块" class="headerlink" title="三、Xpath模块"></a>三、Xpath模块</h2><p>Xpath是XML文档中搜索的一门语言，html是XML的子集</p><h3 id="模块引入："><a href="#模块引入：" class="headerlink" title="模块引入："></a>模块引入：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure><h3 id="具体使用："><a href="#具体使用：" class="headerlink" title="具体使用："></a>具体使用：</h3><p>​    若xml为一个字符串形式的，有标签节点组成的xml字符串，从中提取信息可以遵循这样的语法：</p><p>​    注：<strong>Xpath的定位在开发者工具中右键复制选项，可实现智能定位</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;book&gt;</span></span><br><span class="line"><span class="string">    &lt;id&gt;1&lt;/id&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;野花遍地香&lt;/name&gt;</span></span><br><span class="line"><span class="string">    &lt;price&gt;1.23&lt;/price&gt;</span></span><br><span class="line"><span class="string">    &lt;nick&gt;臭豆腐&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;author&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10086&quot;&gt;周大强&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10010&quot;&gt;周芷若&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;joy&quot;&gt;周杰伦&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;jolin&quot;&gt;蔡依林&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;TTTarget1&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;span&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;TTTarget2&lt;/nick&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;TTTarget3&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/span&gt;</span></span><br><span class="line"><span class="string">    &lt;/author&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;partner&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppc1&quot;&gt;AAAAim1&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;pbc2&quot;&gt;AAAAim2&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;pbc3&quot;&gt;AAAAim3&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;pbc4&quot;&gt;AAAAim4&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;/partner&gt;</span></span><br><span class="line"><span class="string">&lt;/book&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = etree.XML(xml)</span><br><span class="line"><span class="comment">#etree.XML用于匹配xml</span></span><br><span class="line"><span class="comment">#etree.HTML用于匹配html</span></span><br><span class="line"><span class="comment">#etree.parse用于匹配本地文件</span></span><br><span class="line"></span><br><span class="line">result1 = tree.xpath(<span class="string">&quot;/book&quot;</span>)  <span class="comment"># /表示层级关系. 第一个/是根节点</span></span><br><span class="line"></span><br><span class="line">result2 = tree.xpath(<span class="string">&quot;/book/name/text()&quot;</span>)  <span class="comment"># text() 拿文本</span></span><br><span class="line"></span><br><span class="line">result3 = tree.xpath(<span class="string">&quot;/book/author//nick/text()&quot;</span>)  <span class="comment"># //所有后代</span></span><br><span class="line"></span><br><span class="line">result4 = tree.xpath(<span class="string">&quot;/book/author/*/nick/text()&quot;</span>)  <span class="comment"># * 任意的节点. 通配符</span></span><br><span class="line"></span><br><span class="line">result5 = tree.xpath(<span class="string">&quot;/book/partner/nick[1]/text()&quot;</span>)  <span class="comment"># 表示在该目录下的第一个元素，匹配到AAAAim1。注意，此语法中无[0]！</span></span><br><span class="line"></span><br><span class="line">result6 = tree.xpath(<span class="string">&quot;/book/partner/nick[@id=&quot;</span>pbc2<span class="string">&quot;]/text()&quot;</span>) <span class="comment"># 使用[]用于按照标签筛选，结果为AAAAim2</span></span><br><span class="line"></span><br><span class="line"> result7 = tree.xpath(<span class="string">&quot;/book/partner/nick/@id&quot;</span>) <span class="comment"># 直接提取nick标签的id属性</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>其中<code>//</code>代表任意的子集（可以是一层或多层），只要存在就能找到；<br>而<code>/*/</code>代表且只能代表任意一层。</p><p>举例说：<br>代码块中，<code>result4</code>可以匹配到<code>TTTarget1</code>、<code>TTTarget2</code>、<code>TTTarget</code>。<br>但<code>result5</code>只能匹配到<code>TTTarget1</code>、<code>TTTarget2</code>,不能匹配到<code>TTTarget3</code>。</p><p>当使用<code>../xxx[n]/../text()</code>语法时，一定要记住这里的<strong>n是从1开始计数</strong>，如代码块中匹配到的就是<code>AAAAim1</code>，并非<code>AAAAim2</code>！</p><p>注意，当筛选两次，即使用如下语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ol_li_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ol_li_list:     <span class="comment"># 从每一个li中提取到文字信息</span></span><br><span class="line">     result = li.xpath(<span class="string">&quot;./a/text()&quot;</span>) <span class="comment">#在li中继续去寻找. 相对查找</span></span><br><span class="line">     <span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><p><strong>在相对查找时，需要使用<code>./</code>而非<code>/</code>以表示相对路径！</strong></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python异步爬虫基础</title>
      <link href="/2022/02/20/python%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/20/python%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="pyhton异步爬虫基础"><a href="#pyhton异步爬虫基础" class="headerlink" title="pyhton异步爬虫基础"></a>pyhton异步爬虫基础</h1><h2 id="一、多线程-多进程"><a href="#一、多线程-多进程" class="headerlink" title="一、多线程/多进程"></a>一、多线程/多进程</h2><h3 id="多线程："><a href="#多线程：" class="headerlink" title="多线程："></a>多线程：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  多线程</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread  <span class="comment"># 线程类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实现方法1：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=func)  <span class="comment"># 创建线程并给线程安排任务</span></span><br><span class="line">    t.start()  <span class="comment"># 多线程状态为可以开始工作状态, 具体的执行时间由CPU决定</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实现方法2：</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span>(<span class="params">Thread</span>):</span>  <span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span>  <span class="comment"># 固定的    -&gt; 当线程被执行的时候, 被执行的就是run()</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;子线程&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">t = MyThread()</span><br><span class="line">t.run()  <span class="comment"># 方法的调用了. -&gt; 单线程????</span></span><br><span class="line">t.start()  <span class="comment"># 开启线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;主线程&quot;</span>, i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#传参</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">name</span>):</span>  <span class="comment"># ??</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(name, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = Thread(target=func, args=(<span class="string">&quot;周杰伦&quot;</span>,))  <span class="comment"># 传递参数必须是元组(逗号)</span></span><br><span class="line">    t1.start()</span><br><span class="line"></span><br><span class="line">    t2 = Thread(target=func, args=(<span class="string">&quot;王力宏&quot;</span>,))</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h3 id="多进程："><a href="#多进程：" class="headerlink" title="多进程："></a>多进程：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子进程&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=func)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;主进程&quot;</span>, i)</span><br></pre></td></tr></table></figure><h2 id="二、线程池"><a href="#二、线程池" class="headerlink" title="二、线程池"></a>二、线程池</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 如何提取单个页面的数据</span></span><br><span class="line"><span class="comment"># 2. 上线程池,多个页面同时抓取</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">csvwriter = csv.writer(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_one_page</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 拿到页面源代码</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    html = etree.HTML(resp.text)</span><br><span class="line">    table = html.xpath(<span class="string">&quot;/html/body/div[2]/div[4]/div[1]/table&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># trs = table.xpath(&quot;./tr&quot;)[1:]</span></span><br><span class="line">    trs = table.xpath(<span class="string">&quot;./tr[position()&gt;1]&quot;</span>)</span><br><span class="line">    <span class="comment"># 拿到每个tr</span></span><br><span class="line">    <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">        txt = tr.xpath(<span class="string">&quot;./td/text()&quot;</span>)</span><br><span class="line">        <span class="comment"># 对数据做简单的处理: \\  / 去掉</span></span><br><span class="line">        txt = (item.replace(<span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> txt)</span><br><span class="line">        <span class="comment"># 把数据存放在文件中</span></span><br><span class="line">        csvwriter.writerow(txt)</span><br><span class="line">    <span class="built_in">print</span>(url, <span class="string">&quot;提取完毕!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># for i in range(1, 14870):  # 效率及其低下</span></span><br><span class="line">    <span class="comment">#     download_one_page(f&quot;http://www.xinfadi.com.cn/marketanalysis/0/list/&#123;i&#125;.shtml&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建线程池</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">200</span>):  <span class="comment"># 199 * 20 = 3980</span></span><br><span class="line">            <span class="comment"># 把下载任务提交给线程池</span></span><br><span class="line">            t.submit(download_one_page, <span class="string">f&quot;http://www.xinfadi.com.cn/marketanalysis/0/list/<span class="subst">&#123;i&#125;</span>.shtml&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;全部下载完毕!&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="三、协程"><a href="#三、协程" class="headerlink" title="三、协程"></a>三、协程</h2><p>​    协程应该就是指，在单线程的条件下，合理的安排程序的I/O操作与需要使用cpu的计算操作的交互，进行任务之间的调度，使得cpu空闲机会减少，使用率上升，以达到提高程序运行效率的目的。</p><p>​    在爬虫中，常用到的三个协程模块为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio <span class="comment">#基础协程模块</span></span><br><span class="line"><span class="keyword">import</span> aiohttp <span class="comment">#协程网络请求模块</span></span><br><span class="line"><span class="keyword">import</span> aiofiles <span class="comment">#协程文件读写模块</span></span><br></pre></td></tr></table></figure><h3 id="asyncio基础："><a href="#asyncio基础：" class="headerlink" title="asyncio基础："></a>asyncio基础：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func1</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫潘金莲&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func2</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">func3</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊, 我叫李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 第一种写法</span></span><br><span class="line">    f1 = func1()</span><br><span class="line">    <span class="keyword">await</span> f1  <span class="comment"># 一般await挂起操作放在协程对象前面</span></span><br><span class="line">    <span class="comment"># 第二种写法(推荐)</span></span><br><span class="line">    tasks = [</span><br><span class="line">        asyncio.create_task(func1()),  <span class="comment"># py3.8以后加上asyncio.create_task()</span></span><br><span class="line">        asyncio.create_task(func2()),</span><br><span class="line">        asyncio.create_task(func3())</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 一次性启动多个任务(协程)</span></span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>总结基础步骤：</p><ol><li><strong>创建带有<code>async</code>关键字的函数，函数中所有异步操作都需要<code>await</code>修饰；</strong></li><li><strong><code>asyncio.create_task(func1())</code>包裹后，丢进任务列表中</strong></li><li><strong><code>await asyncio.wait(tasks)</code>任务列表整体开始执行</strong></li></ol><h3 id="aiohttp的基本使用："><a href="#aiohttp的基本使用：" class="headerlink" title="aiohttp的基本使用："></a>aiohttp的基本使用：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&quot;http://a.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://b.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://c.jpg&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">aiodownload</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="comment"># 发送请求.</span></span><br><span class="line">    <span class="comment"># 得到图片内容</span></span><br><span class="line">    <span class="comment"># 保存到文件</span></span><br><span class="line">    name = url.rsplit(<span class="string">&quot;/&quot;</span>, <span class="number">1</span>)[<span class="number">1</span>]  <span class="comment"># 从右边切, 切一次. 得到[1]位置的内容</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:  <span class="comment"># resp = requests.get()</span></span><br><span class="line">            <span class="comment"># 请求回来了. 写入文件</span></span><br><span class="line">            <span class="comment"># 可以自己去学习一个模块, aiofiles</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:  <span class="comment"># 创建文件</span></span><br><span class="line">                f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 读取内容是异步的. 需要await挂起, resp.text()</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(name, <span class="string">&quot;Done&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        tasks.append(aiodownload(url))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结基本步骤：</p><ol><li>创建带有<code>async</code>关键字的函数，函数中所有异步操作都需要<code>await</code>修饰；</li><li><strong>使用<code>aiohttp.ClientSession()</code>创建<code>session</code></strong></li><li><strong>使用<code>session</code>中提供的<code>get（）</code>方法请求到url对应的资源</strong></li><li><strong>在已经获得的资源中读取信息也是异步的，需要使用await包裹</strong></li><li><code>asyncio.create_task(func1())</code>包裹后，丢进任务列表中</li><li><code>await asyncio.wait(tasks)</code>任务列表整体开始执行</li></ol><h3 id="aiofiles的基本使用："><a href="#aiofiles的基本使用：" class="headerlink" title="aiofiles的基本使用："></a>aiofiles的基本使用：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">       <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">           dic = <span class="keyword">await</span> resp.json()</span><br><span class="line"></span><br><span class="line">           <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(title, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">               <span class="keyword">await</span> f.write(dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;novel&#x27;</span>][<span class="string">&#x27;content&#x27;</span>])  <span class="comment"># 把小说内容写出</span></span><br></pre></td></tr></table></figure><p>总结基本步骤：</p><ol><li>创建带有<code>async</code>关键字的函数，函数中所有异步操作都需要<code>await</code>修饰；</li><li>使用<code>aiohttp.ClientSession()</code>创建<code>session</code></li><li>使用<code>session</code>中提供的<code>get（）</code>方法请求到url对应的资源</li><li>在已经获得的资源中读取信息也是异步的，需要使用await包裹</li><li><strong>调用文件操作时，使用<code>async</code>关键字，并使用<code>aiofiles.open</code>替代<code>file.open</code></strong></li><li><strong>在进行文件读写时，需要用<code>await</code>包裹</strong></li><li><code>asyncio.create_task(func1())</code>包裹后，丢进任务列表中</li><li><code>await asyncio.wait(tasks)</code>任务列表整体开始执行</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn栈基础</title>
      <link href="/2022/02/14/PWN_%E6%A0%88%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/14/PWN_%E6%A0%88%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="PWN-栈基础"><a href="#PWN-栈基础" class="headerlink" title="PWN_栈基础"></a>PWN_栈基础</h1><h2 id="程序段结构图："><a href="#程序段结构图：" class="headerlink" title="程序段结构图："></a>程序段结构图：</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220214115234565.png" alt="image-20220214115234565"></p><h2 id="栈结构图："><a href="#栈结构图：" class="headerlink" title="栈结构图："></a>栈结构图：</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220214120911800.png" alt="image-20220214120911800"></p><p>栈在内存中向下增长（地址下降）。<br>每个函数有自己的栈空间，从栈底（高地址）向栈顶（低地址）增长，函数与函数之间被称为栈帧。</p><p>其中，<br>    <strong>EBP</strong>指向栈底；<strong>ESP</strong>指向栈顶；</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>gdb调试基础</title>
      <link href="/2022/02/14/gdb%E8%B0%83%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/14/gdb%E8%B0%83%E8%AF%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="gdb调试基础"><a href="#gdb调试基础" class="headerlink" title="gdb调试基础"></a>gdb调试基础</h1><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220213222351708.png" alt="image-20220213222351708" style="zoom:150%;" /><p><strong>调试</strong>：<br>    <code>s</code>默认在源代码下进行调试，在已经输入<code>s</code>的情况下，直接回车执行上一条语句；<br>    <code>si</code>为在汇编下进行调试；</p><p><strong>下断点：</strong></p><pre><code> 1. `b func_name` 2. `b /src/codefile.cc:81` gdb将在运行到源码文件/src/codefile.cc的第81行中断 3. `b *0x5859c0` &quot;*&quot;号是必须加在地址前的，0x5859c0为函数指针的地址</code></pre><p><strong>段列表：</strong><br>    <code>vmap</code>可以显示程序的段列表</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="/2022/01/29/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/01/29/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础"><a href="#Linux基础" class="headerlink" title="Linux基础"></a>Linux基础</h1><h2 id="一、Linux文件系统根目录下的目录及他们的作用"><a href="#一、Linux文件系统根目录下的目录及他们的作用" class="headerlink" title="一、Linux文件系统根目录下的目录及他们的作用"></a>一、Linux文件系统根目录下的目录及他们的作用</h2><p><strong>一切皆文件</strong></p><p>根目录下存多个文件夹（名称系统定义，不能修改）：</p><ul><li><p>/bin[<strong>常用</strong>] （/usr/bin 、/user/local/bin)    </p><p>为Binary缩写，存放着最常使用的命令</p></li><li><p>/sbin （/usr/sbin、/user/local/sbin）</p><p>s即SuperUser，存放管理员的系统管理程序</p></li><li><p>/home[<strong>常用</strong>]</p><p>用于存放不同用户创建的文件，结构为/home/用户名/……</p></li><li><p>/root[<strong>常用</strong>] </p><p>系统管理员，超级权限者的主目录</p></li><li><p>/lib </p><p>系统开机需要最基本的动态链接库,同时存放程序需要的动态链接库</p></li><li><p>/lost+found (隐藏目录)</p><p>存放非法关机后生成的文件</p></li><li><p>/etc [<strong>常用</strong>]</p><p>系统管理需要的配置文件和子目录，例如mysql的my.conf</p></li><li><p>/usr [<strong>常用</strong>]</p><p>非常重要，放置用户的很多应用程序和文件，类似programfiles</p></li><li><p>/boot [<strong>常用</strong>]</p><p>系统启动的核心文件，一些连接文件和镜像文件</p></li><li><p>/proc [<strong>不能动</strong>]</p><p>是一个虚拟的目录，是系统内存的映射，访问这个目录获得系统信息</p></li><li><p>/srv [<strong>不能动</strong>]</p><p>是service的缩写，存放一些服务启动后的数据</p></li><li><p>/sys [<strong>不能动</strong>]</p><p>这是Linux 2.6版本的拜年话，安装了内核新出现的文件系统sysfs</p></li><li><p>/tmp</p><p>存放临时文件</p></li><li><p>/dev </p><p>是device的缩写，把硬件当作文件形式储存，类似设备管理器</p></li><li><p>/media [<strong>常用</strong>]</p><p>系统会识别一些设备，如u盘、光驱，识别后，系统会将被识别的设备挂载在此目录下</p></li><li><p>/mnt [<strong>常用</strong>]</p><p>系统提供该目录让用户挂载其他文件系统，我们可以将外部储存挂载在该目录，然后进入就可以查看其中的内容了</p></li><li><p>/opt </p><p>默认将安装文件放在该目录下（安装前）</p></li><li><p>/user/local [<strong>常用</strong>]</p><p>安装软件的目录（安装后），一般是以源码方式安装的程序</p></li><li><p>/var [<strong>常用</strong>]</p><p>存放不断扩充的内容，常用的就是一些日志等等</p></li><li><p>/selinux [security-enhanced-Linux]</p><p>一种安全子系统，控制程序访问的文件，可以自行开启关闭</p></li></ul><p>linux的隐藏文件是以<code>.</code>开头的</p><h2 id="二、Linux实用指令"><a href="#二、Linux实用指令" class="headerlink" title="二、Linux实用指令"></a>二、Linux实用指令</h2><h3 id="1-帮助指令"><a href="#1-帮助指令" class="headerlink" title="1.帮助指令"></a>1.帮助指令</h3><p><code>man+space+[指令名]</code>：</p><p>输出帮助，一般会显示命令作用及各个参数，在linux中，各个参数可以组合使用，例如，ls指令有参数<code>-l</code>和<code>-a</code>，可以直接简化为<code>-la</code>。</p><p><code>help+[shell命令]</code>：</p><p>输出shell命令的帮助。</p><h3 id="2-文件目录指令"><a href="#2-文件目录指令" class="headerlink" title="2.文件目录指令"></a>2.文件目录指令</h3><p><strong><code>pwd</code>指令：</strong></p><p>作用：pwd指令用于显示当前绝对路径</p><p><strong><code>ls</code>指令：</strong></p><p>作用：<br>    ls指令用于列出目录下的内容<br>基本用法：<br>    <code>ls [选项] [目录或文件]</code><br>常用选项:<br>    <code>-a</code>:显示当前目录下的所有文件（包括隐藏文件）<br>    <code>-l</code>: 以列表的形式显示详细信息<br>    <code>-lh</code>：以列表的形式显示详细信息并且增加可读性（转化单位）</p><p><strong><code>cd</code>指令：</strong></p><p>作用：<br>    cd指令用于切换目录<br>基本语法：<br>    <code>cd [参数]</code><br>特殊用法：<br>    <code>cd ~</code>或者<code>cd :</code> 回到家目录<br>    <code>cd ..</code>回到上一级目录</p><p><strong><code>mkdir</code>指令：</strong></p><p>作用：<br>    mkdir指令用于创建目录<br>基本语法：<br>    <code>mkdir [选项] 要创建的目录</code><br>常用选项：<br>    <code>-p</code>：创建多级目录</p><p><strong><code>rmdir</code>指令：</strong></p><p>作用：<br>    rmdir指令删除空目录<br>基本语法：<br>    <code>rmdir [选项] 要删除的目录</code><br>使用细节：<br>    rmdir删除的目录是空的，如果目录下有内容是无法删除的</p><p>如果要删除非空目录，使用**<code>rm -rf [目录]</code>**来强制删除非空目录。</p><p><strong><code>touch</code>指令：</strong></p><p>创建空文件</p><p><strong><code>cp</code>指令</strong>：</p><p>作用：<br>    cp指令拷贝文件到指定目录<br>基本语法：<br>    <code>cp [选项] source destination</code><br>常用选项：<br>    <code>-r</code> ：递归赋值整个文件夹<br>常见用法：<br>    使用<code>\cp</code>表示默认覆盖原有文件</p><p><strong><code>rm</code>指令</strong>：</p><p>作用：<br>    删除文件或目录<br>基本语法：<br>    <code>rm [选项] 要删除的文件或目录</code><br>常用选项：<br>    <code>-r</code>：递归删除整个文件夹<br>    <code>-f</code>：强制删除不提示</p><p><strong><code>mv</code>指令：</strong></p><p>作用：<br>    移动文件与目录或重命名<br>基本语法：<br>    <code>mv oldNameFile newNameFile</code>（重命名）<br>    <code>mv /temp/movefile /targetFolder</code>(移动)</p><p><strong><code>cat</code>指令：</strong></p><p>作用：<br>    查看文件内容（只读）<br>基本语法：<br>    cat [选项] 要查看的文件<br>常用选项：<br>    <code>-n</code>显示行号</p><p><strong><code>tail</code>指令：</strong></p><p>作用：<br>    tail指令用于输出文件尾部的内容，默认为十行，一般用与监听文件内容变化<br>基本语法：<br>    <code>tail 文件</code>（查看文件尾十行内容）<br>    <code>tail -n 5 文件</code>（查看文件尾五行内容）<br>    <code>tail -f 文件</code>（监听文档的所有更新）</p><p><strong><code>&gt;</code>指令和<code>&gt;&gt;</code>指令：</strong></p><p>作用：<br>    用于进行重定向和追加（即覆盖和添加）<br>基本语法：<br>    1）<code>ls -l &gt;a.txt</code>（将列表的内容写入文件a.txt中)<br>    2）<code>ls -al &gt;&gt;b.txt</code>(将列表内容追加到b.txt文件后)<br>    3）<code>cat 文件1 &gt; 文件2</code>（用文件1的内容覆盖文件2）<br>    4）echo “text”&gt;&gt;文件 （将内容追加到文件中）</p><p><strong><code>ln</code>指令：</strong></p><p>作用：<br>    添加软链接（类似快捷方式）<br>基本语法：<br>    <code>ln -s [原文件或目录] [软链接名] </code>（给源文件创建一个软链接）</p><p><strong><code>history</code>指令：</strong></p><p>查看最近执行的n（默认500）条指令<br><code>！</code>语法：直接使用<code>!5</code>执行最近执行的第5条指令</p><h3 id="3、时间指令"><a href="#3、时间指令" class="headerlink" title="3、时间指令"></a>3、时间指令</h3><p><strong><code>date</code>（时间）<code>cal</code>（日历）</strong></p><h3 id="4、搜索查找指令"><a href="#4、搜索查找指令" class="headerlink" title="4、搜索查找指令"></a>4、搜索查找指令</h3><p><strong><code>find</code>指令：</strong></p><p>作用：<br>    从指定目录向下递归遍历各个子目录，将满足条件的文件或目录显示在终端<br>基本语法：<br>    <code>find [搜索范围] [选项]</code><br>选项说明：<br>    <code>-name</code> 按照指定的文件名查找<br>    <code>-user</code>按照指定用户所拥有的文件<br>    <code>-size</code>按照指定的大小查找文件文件</p><p>举例：<br>    <code>find /home -name hello.txt</code>（在home目录下查找名为hello.txt的文件）<br>    <code>find /opt -user nobody</code> (在opt目录下查找所有者为nobody的文件)<br>    <code>find / -size +200M</code>（查找系统中大于200M的文件）<br>其中，文件大小的表示放大（<code>-</code>小于，<code>+</code>大于，无符号大呢关于，单位有kMG）</p><p><strong><code>locate</code>指令</strong>：（过时，需要自行安装）</p><p>作用：<br>    快速定位文件路径<br>基本语法：<br>    <code>locate [文件名]</code><br>前趋指令：<br>    <code>updatedb</code></p><h2 id="三、Linux权限管理"><a href="#三、Linux权限管理" class="headerlink" title="三、Linux权限管理"></a>三、Linux权限管理</h2><h3 id="1-权限基本介绍"><a href="#1-权限基本介绍" class="headerlink" title="1.权限基本介绍"></a>1.权限基本介绍</h3><p>例：<code>ls  -l</code> 中显示的内容如下：</p><p><code>-rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc</code></p><p>对最前面的十个（0~9位）字符进行说明：</p><p>​    第 0 位确定文件类型(d, - , l , c , b)<br>​        <strong>l</strong> 是链接，相当于 <strong>windows</strong> 的快捷方式<br>​        <strong>d</strong> 是目录，相当于 <strong>windows</strong> 的文件夹<br>​        <strong>c</strong> 是字符设备文件，鼠标，键盘<br>​        <strong>b</strong> 是块设备，比如硬盘</p><p>​    第 1-3 位确定所有者（该文件的所有者）拥有该文件的权限。—User</p><p>​    第 4-6 位确定所属组（同用户组的）拥有该文件的权限，—Group </p><p>​    第 7-9 位确定其他用户拥有该文件的权限 —Other；</p><h3 id="2-rwx权限详解"><a href="#2-rwx权限详解" class="headerlink" title="2. rwx权限详解"></a>2. rwx权限详解</h3><h4 id="1-rwx作用到文件："><a href="#1-rwx作用到文件：" class="headerlink" title="1)rwx作用到文件："></a>1)rwx作用到文件：</h4><p>[ r ]代表可读(read): 可以读取,查看<br>[ w ]代表可写(write): 可以修改,但是不代表可以删除该文件,删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.<br>[ x ]代表可执行(execute):可以被执行</p><h4 id="2）rwx作用到目录"><a href="#2）rwx作用到目录" class="headerlink" title="2）rwx作用到目录"></a>2）rwx作用到目录</h4><p>[ r ]代表可读(read): 可以读取，ls 查看目录内容<br>[ w ]代表可写(write): 可以修改, 对目录内创建+删除+重命名目录<br>[ x ]代表可执行(execute):可以进入该目录，使用cd指令</p><h4 id="3）rwx的数字表示"><a href="#3）rwx的数字表示" class="headerlink" title="3）rwx的数字表示"></a>3）rwx的数字表示</h4><p>可用数字表示为: r=4,w=2,x=1 因此 rwx=4+2+1=7 , 数字可以进行组合；</p><p>因此，一位数字就可以对应一类用户的权限。</p><h3 id="3-修改权限"><a href="#3-修改权限" class="headerlink" title="3.修改权限"></a>3.修改权限</h3><p>通过<code>chmod</code>指令，可以修改文件或者目录的权限，有以下两种方法：</p><h4 id="1）-、-、-变更权限"><a href="#1）-、-、-变更权限" class="headerlink" title="1）+ 、-、= 变更权限"></a>1）+ 、-、= 变更权限</h4><p><code>u</code>:所有者   <code>g</code>:所有组   <code>o</code>:其他人   <code>a</code>:所有人(u、g、o 的总和)</p><ol><li><code>chmod   u=rwx,g=rx,o=x   文件/目录名</code></li><li><code>chmod   o+w    文件/目录名</code></li><li><code>chmod   a-x    文件/目录名</code></li></ol><p>举例说明:</p><ol><li>给 abc 文件 的所有者读写执行的权限，给所在组读执行权限，给其它组读执行权限。</li></ol><p>​        <code>chmod u=rwx,g=rx,o=rx abc</code></p><ol start="2"><li>给 abc 文件的所有者除去执行的权限，增加组写的权限</li></ol><p>​        <code>chmod u-x,g+w abc</code></p><ol start="3"><li>给 abc 文件的所有用户添加读的权限</li></ol><p>​        <code>chmod a+r abc</code></p><h4 id="2-通过数字变更权限"><a href="#2-通过数字变更权限" class="headerlink" title="2)通过数字变更权限"></a>2)通过数字变更权限</h4><p>按照<code>chmod nnn  文件/目录名</code>的方式转化即可：</p><p>​    <strong>其中n对应rwx的数字表示</strong>；</p><p>​    <strong>三位n分别对应<code>u</code>:所有者   <code>g</code>:所有组   <code>o</code>:其他人</strong></p><p>举例说明：</p><p>​    由于r=4 w=2 x=1  rwx=4+2+1=7 </p><p>​    因此<code>chmod u=rwx,g=rx,o=x  a.txt</code></p><p>​    相当于<code>chmod 751  a.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vi和vim的基础使用</title>
      <link href="/2022/01/29/vi%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/01/29/vi%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="vi的基础使用"><a href="#vi的基础使用" class="headerlink" title="vi的基础使用"></a>vi的基础使用</h1><p>vim即vi的增强版，带有代码补全高亮等功能。</p><h2 id="一、vi和vim的三种模式"><a href="#一、vi和vim的三种模式" class="headerlink" title="一、vi和vim的三种模式"></a>一、vi和vim的三种模式</h2><ul><li>正常模式：移动光标，删除字符或者整行，复制粘贴</li><li>插入模式（一般输入i进入）：编辑模式</li><li>命令行模式：（输入esc，然后：）提供相关指令，存档、离开等等</li></ul><p><strong>三种模式的相互转化：</strong></p><p>命令行中输入：<code>vim xxx</code>进入 <em>一般模式</em>；</p><p>在 <em>一般模式</em>中，输入<code>i或者a</code>进入 <em>编辑模式</em>；输入<code>：或者/</code>进入 <em>命令模式</em></p><p>在 <em>命令模式</em>或者 <em>一般模式</em>中，输入<code>esc</code>进入 <em>一般模式</em></p><p><strong>命令行模式的退出方式：</strong></p><p><code>：wq</code>-保存并退出</p><p><code>：q</code>-退出，不保存</p><p><code>：q！</code>-强制退出，不保存</p><h2 id="二、vi快捷键总结"><a href="#二、vi快捷键总结" class="headerlink" title="二、vi快捷键总结"></a>二、vi快捷键总结</h2><h3 id="1-一般模式下的处理"><a href="#1-一般模式下的处理" class="headerlink" title="1.一般模式下的处理"></a>1.一般模式下的处理</h3><p><strong>拷贝</strong>：拷贝当前行为<code>yy</code>；拷贝从当前行开始，直到向下的n行<code>nyy</code>（如<code>5yy</code>)</p><p><strong>粘贴</strong>：输入p</p><p><strong>删除</strong>：删除当前行为<code>dd</code>；删除从当前行开始，直到向下的n行<code>ndd</code>（如<code>5dd</code>)</p><p><strong>撤销</strong>：输入<code>u</code>撤销</p><p><strong>定位到首、末行</strong>：输入<code>G（即shift+g）</code>移动到最末行，输入<code>gg</code>移动到首行</p><p><strong>定位到某一行</strong>：输入要定位的行号（如 <code>20</code>），然后输入<code>G（即shift+g）</code></p><h3 id="2-命令行模式的处理"><a href="#2-命令行模式的处理" class="headerlink" title="2.命令行模式的处理"></a>2.命令行模式的处理</h3><p><strong>查找</strong>：输<code>/</code>进入命令行模式，输入要查找的字符串，回车即可，下一个为<code>n</code></p><p><strong>设置行号</strong>：输<code>：</code>进入命令行模式，输入<code>set nu</code>打开行号，输入<code>set nonu</code>关闭行号</p><h2 id="三、快捷键汇总"><a href="#三、快捷键汇总" class="headerlink" title="三、快捷键汇总"></a>三、快捷键汇总</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220129112602834.png" alt="image-20220129112602834"></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220129112635532.png" alt="image-20220129112635532"></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220129112720141.png" alt="image-20220129112720141"></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220129112740533.png" alt="image-20220129112740533"></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220129112802395.png" alt="image-20220129112802395"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式简单笔记</title>
      <link href="/2022/01/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/01/23/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>python中可以通过<code>import re</code>引入re模块，用正则表达式处理字符串</p><h2 id="一、正则表达式"><a href="#一、正则表达式" class="headerlink" title="一、正则表达式"></a>一、正则表达式</h2><p><strong>在线正则表达式测试工具：<a href="https://regex101.com/">https://regex101.com/</a></strong></p><h3 id="1、限定符"><a href="#1、限定符" class="headerlink" title="1、限定符"></a>1、限定符</h3><h4 id="匹配单字符"><a href="#匹配单字符" class="headerlink" title="匹配单字符"></a>匹配单字符</h4><p><strong>? 限定符</strong>：通过<code>used？</code>可匹配<code>use</code>或<code>used</code>,等含有<code>use</code>字样，<code>d</code>可有可无；</p><p>*<strong>限定符</strong>：通过<code>ab*c</code>可以匹配 <code>ac abc abbbbc</code>等含有n个b，ac必须按照顺序有的字符串；</p><p><strong>+限定符</strong>：即*限定符除去没有b的情况，<code>ab</code>不会被匹配；</p><p><strong>{n}限定符</strong>：<code>ab&#123;6&#125;c</code>可匹配b出现次数为6的情况，或者，{2,6}为2-6次，{2,}为两次以上</p><h4 id="匹配多字符"><a href="#匹配多字符" class="headerlink" title="匹配多字符"></a>匹配多字符</h4><p>使用 **()**框选所要匹配的字符，然后正常使用限定符。</p><h3 id="2、“或”运算符"><a href="#2、“或”运算符" class="headerlink" title="2、“或”运算符"></a>2、“或”运算符</h3><p>正则表达式要匹配 <code>acat</code>或者 <code>adog</code>时，可以使用或运算符，表达式如下：</p><p><code>a(cat|dog)</code></p><h3 id="3、字符类"><a href="#3、字符类" class="headerlink" title="3、字符类"></a>3、字符类</h3><p><strong>[] 匹配符</strong>：</p><p>如果想匹配ab三个字母组成的内容，可以使用 <code>[abc]+</code>;</p><p>其中<code>[]</code>用于限制匹配的字符；</p><p>在方括号中，我们可以指定范围，语法如 <code>[a-zA-Z]</code>即大小写所有英文字符；</p><p><strong>^匹配：</strong></p><p>和方括号联用，<code>[^0-9]+</code>代表非数字</p><h3 id="4、元字符"><a href="#4、元字符" class="headerlink" title="4、元字符"></a>4、元字符</h3><p>元字符是正则表达式预先定义好的内容</p><table><thead><tr><th>符号</th><th>释义</th><th>解释</th></tr></thead><tbody><tr><td>\d+</td><td>数字字符</td><td>等同于[0-9]</td></tr><tr><td>\w+</td><td>单词字符</td><td>英文、数字、下划线</td></tr><tr><td>\s+</td><td>空白符</td><td>TAB和换行符（空格）</td></tr><tr><td>\D+</td><td>非数字字符</td><td></td></tr><tr><td>\W+</td><td>非单词字符</td><td></td></tr><tr><td>\S+</td><td>非空白字符</td><td></td></tr><tr><td>\b</td><td>单词边界</td><td>\b的前一个字符和后一个字符不全是\w</td></tr><tr><td>.*</td><td>任意字符</td><td>不包含换行符</td></tr></tbody></table><p>注：</p><p>**+**为匹配多个连接的字符，而非一个一个单独匹配</p><table><thead><tr><th>特殊字符</th><th>释义</th><th>解释</th></tr></thead><tbody><tr><td>^</td><td>匹配行首</td><td>如^a,只会匹配行首的a，而非所有a</td></tr><tr><td>$</td><td>匹配行尾</td><td>如$a,只会匹配行尾的a，而非所有a</td></tr></tbody></table><h3 id="5、贪婪与懒惰匹配"><a href="#5、贪婪与懒惰匹配" class="headerlink" title="5、贪婪与懒惰匹配"></a>5、贪婪与懒惰匹配</h3><p>正则表达式默认使用的是贪婪匹配；</p><p>即，当出现较大的字符能被一次匹配时，忽略其包含的较小的字符，优先匹配较大的字符，试举一例，当我们尝试匹配html标签，匹配内容如下：<br><code>&lt;span&gt;&lt;b&gt;this is a text&lt;/b&gt;&lt;/span&gt;</code></p><p>我们可能会使用 <code>&lt;.+&gt;</code>进行匹配：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220123111221372.png" alt="image-20220123111221372"></p><p>正则默认选择了最贪婪的匹配方法。</p><p>我们可以手动切换贪婪匹配为懒惰匹配，使用 <code>&lt;.+?&gt;</code>进行匹配：<br><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220123111350484.png" alt="image-20220123111350484"></p><h3 id="6、优秀教程"><a href="#6、优秀教程" class="headerlink" title="6、优秀教程"></a>6、优秀教程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[详细文本教程]: https://deerchao.cn/tutorials/regex/regex.htm&quot;正则表达式30分钟入门教程&quot;</span><br><span class="line">[10分钟入门]: https://www.bilibili.com/video/BV1da4y1p7iZ?from=search&amp;amp;seid=5661918744314357020&amp;amp;spm_id_from=333.337.0.0&quot;10分钟快速掌握正则表达式&quot;</span><br></pre></td></tr></table></figure><h2 id="二、正则表达式的使用"><a href="#二、正则表达式的使用" class="headerlink" title="二、正则表达式的使用"></a>二、正则表达式的使用</h2><h4 id="1、"><a href="#1、" class="headerlink" title="1、. ^ $"></a>1、. ^ $</h4><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>a.</td><td>abacad</td><td>abacad</td><td>匹配所有”a.”的字符</td></tr><tr><td>^a.</td><td>abacad</td><td>ab</td><td>只从开头匹配”a.”</td></tr><tr><td>a.$</td><td>abacad</td><td>ad</td><td>只匹配结尾的”a.$”</td></tr></tbody></table><h4 id="2、"><a href="#2、" class="headerlink" title="2、* + ? { }"></a>2、* + ? { }</h4><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>a.?</td><td>abefacgad</td><td>ab ac ad</td><td>?表示重复零次或一次，即只匹配”a”后面一个任意字符。</td></tr><tr><td>a.*</td><td>abefacgad</td><td>abefacgad</td><td>*表示重复零次或多次，即匹配”a”后面0或多个任意字符。</td></tr><tr><td>a.+</td><td>abefacgad</td><td>abefacgad</td><td>+表示重复一次或多次，即只匹配”a”后面1个或多个任意字符。</td></tr><tr><td>a.{1,2}</td><td>abefacgad</td><td>abe acg ad</td><td>{1,2}匹配1到2次任意字符。</td></tr></tbody></table><p>注意：前面的*,+,?等都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>a.*?</td><td>abefacgad</td><td>a a a</td><td>惰性匹配</td></tr></tbody></table><h4 id="3、字符集［］［-］"><a href="#3、字符集［］［-］" class="headerlink" title="3、字符集［］［^］"></a>3、字符集［］［^］</h4><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>a[befcgd]*</td><td>abefacgad</td><td>abef acg ad</td><td>表示匹配”a”后面[befcgd]的字符任意次`</td></tr><tr><td>a[^f]*</td><td>abefacgad</td><td>abe acgad</td><td>表示匹配一个不是”f”的字符任意次</td></tr><tr><td>[\d]</td><td>412a3bc</td><td>4 1 2 3</td><td>表示匹配任意一个数字，匹配到4个结果</td></tr><tr><td>[\d]+</td><td>412a3bc</td><td>412 3</td><td>表示匹配任意个数字，匹配到2个结果</td></tr></tbody></table><h4 id="4、分组-与-或-｜［-］"><a href="#4、分组-与-或-｜［-］" class="headerlink" title="4、分组 ()与 或 ｜［^］"></a>4、分组 ()与 或 ｜［^］</h4><p>　　身份证号码是一个长度为15或18个字符的字符串，如果是15位则全部由数字组成，首位不能为0；如果是18位，则前17位全部是数字，末位可能是数字或x，下面我们尝试用正则来表示：</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>^[1-9]\d{13,16}[0-9x]$</td><td>110101198001017032</td><td>110101198001017032</td><td>表示可以匹配一个正确的身份证号</td></tr><tr><td>^[1-9]\d{13,16}[0-9x]$</td><td>1101011980010170</td><td>1101011980010170</td><td>表示也可以匹配这串数字，但这并不是一个正确的身份证号码，它是一个16位的数字</td></tr><tr><td>^[1-9]\d{14}(\d{2}[0-9x])?$</td><td>1101011980010170</td><td>False</td><td>现在不会匹配错误的身份证号了()表示分组，将\d{2}[0-9x]分成一组，就可以整体约束他们出现的次数为0-1次</td></tr><tr><td>^([1-9]\d{16}[0-9x]|[1-9]\d{14})$</td><td>110105199812067023</td><td>110105199812067023</td><td>表示先匹配[1-9]\d{16}[0-9x]如果没有匹配上就匹配[1-9]\d{14}</td></tr></tbody></table><h4 id="5、转义符"><a href="#5、转义符" class="headerlink" title="5、转义符 \"></a>5、转义符 \</h4><p>　　在正则表达式中，有很多有特殊意义的是元字符，比如\n和\s等，如果要在正则中匹配正常的”\n”而不是”换行符”就需要对”&quot;进行转义，变成’\‘。</p><p>　　在python中，无论是正则表达式，还是待匹配的内容，都是以字符串的形式出现的，在字符串中\也有特殊的含义，本身还需要转义。所以如果匹配一次”\n”,字符串中要写成’\n’，那么正则里就要写成”\\n”,这样就太麻烦了。这个时候我们就用到了r’\n’这个概念，此时的正则是r’\n’就可以了。</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配 结果</th><th>说明</th></tr></thead><tbody><tr><td>\n</td><td>\n</td><td>False</td><td>因为在正则表达式中\是有特殊意义的字符，所以要匹配\n本身，用表达式\n无法匹配</td></tr><tr><td>\n</td><td>\n</td><td>True</td><td>转义\之后变成\，即可匹配</td></tr><tr><td>“\\n”</td><td>‘\n’</td><td>True</td><td>如果在python中，字符串中的’&#39;也需要转义，所以每一个字符串’&#39;又需要转义一次</td></tr><tr><td>r’\n’</td><td>r’\n’</td><td>True</td><td>在字符串之前加r，让整个字符串不转义</td></tr></tbody></table><h4 id="6、贪婪匹配"><a href="#6、贪婪匹配" class="headerlink" title="6、贪婪匹配"></a>6、贪婪匹配</h4><p>贪婪匹配：在满足匹配时，匹配尽可能长的字符串，默认情况下，采用贪婪匹配</p><table><thead><tr><th>正则</th><th>待匹配字符</th><th>匹配结果</th><th>说明</th></tr></thead><tbody><tr><td>&lt;.*&gt;</td><td><script>...<script></td><td><script>...<script></td><td>默认为贪婪匹配模式，会匹配尽量长的字符串</td></tr><tr><td>&lt;.*?&gt;</td><td><script>...<script></td><td><script> <script></td><td>加上？为将贪婪匹配模式转为非贪婪匹配模式，会匹配尽量短的字符串</td></tr></tbody></table><p>几个常用的非贪婪匹配Pattern</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*? 重复任意次，但尽可能少重复</span><br><span class="line">+? 重复1次或更多次，但尽可能少重复</span><br><span class="line">?? 重复0次或1次，但尽可能少重复</span><br><span class="line">&#123;n,m&#125;? 重复n到m次，但尽可能少重复</span><br><span class="line">&#123;n,&#125;? 重复n次以上，但尽可能少重复</span><br></pre></td></tr></table></figure><p>.*?的用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">. 是任意字符</span><br><span class="line">* 是取 0 至 无限长度</span><br><span class="line">? 是非贪婪模式。</span><br><span class="line">何在一起就是 取尽量少的任意字符，一般不会这么单独写，他大多用在：</span><br><span class="line">.*?x</span><br><span class="line">就是取前面任意长度的字符，直到一个x出现</span><br></pre></td></tr></table></figure><p>本部分摘自：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">博客园-iveBoy https://www.cnblogs.com/shenjianping/p/11647473.html Python之re模块</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Reverse进阶区-BABYHOOK-writeup</title>
      <link href="/2022/01/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-BABYHOOK-writeup/"/>
      <url>/2022/01/22/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-BABYHOOK-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界Reverse进阶区-流浪者-writeup"><a href="#攻防世界Reverse进阶区-流浪者-writeup" class="headerlink" title="攻防世界Reverse进阶区-流浪者-writeup"></a>攻防世界Reverse进阶区-流浪者-writeup</h1><p>本题为较为基础的Hook题，通过本writeup来整理一下思路。</p><h2 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122143740757.png" alt="image-20220122143740757"></p><p>进入程序，首先确定<code>flag</code>字符串长度为<strong>19</strong>；</p><p>然后发现程序会将输入内容写入文件名为文件<strong>Your_input</strong>的文件；</p><p>最后通过核验<strong>NumberOfBytesWritten</strong>变量是否为1来控制输出；</p><p>此时，若进入<strong>sub_401240</strong>函数就会中计，需手动进行测试。</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122144439005.png" alt="image-20220122144439005"></p><p>手动测试后发现输出文件中的内容和输入完全不同，推测可能在<strong>sub_401220</strong>函数中对输入进行了加密。</p><h2 id="sub-401220函数："><a href="#sub-401220函数：" class="headerlink" title="sub_401220函数："></a>sub_401220函数：</h2><p>进入<strong>sub_401220</strong>函数：（为<code>hook</code>关键函数）</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122144907695.png" alt="image-20220122144907695"></p><p>其主要内容如下（1~14行）：</p><blockquote><p>获取当前进程号，打开进程到hprocess,libfilename为一常量kernel32.dll，procname为一常量writefile,故dword_409c4（*WriteFile_0位置)、lpaddress所存为writefile的地址，然后程序复制了lpaddress的地址到unk_40c9b4。</p></blockquote><p>然后开始hook操作（15、16行）：</p><p>可以看到第15行有一常量被存入地址<code>40C9BC</code>，H键转化为十六进制 <strong>0xE9</strong></p><p>然后在地址<code>40C9BD</code>存入了函数<code>sub_401080</code>与IpAdress的距离再减去5，即<code>sub_401080</code>与WriteFile函数的距离。</p><p>总结来说，将writeFile函数的前五个字节替换为了跳转到<code>sub_401080</code>的语句。</p><p>回到main函数后，在调用<code>WriteFile</code>函数时，实际调用的是<code>sub_401080</code>，因此进入<code>sub_401080</code>：</p><h2 id="sub-401080函数："><a href="#sub-401080函数：" class="headerlink" title="sub_401080函数："></a>sub_401080函数：</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122152116398.png" alt="image-20220122152116398"></p><p>可以看到，此函数内容为，先调用<code>sub_401000</code>，返回值V5；</p><p>然后再在内部调用WriteFile函数；</p><p>最终根据V5的值，判断第四个指针参数<em>lpNumberOfBytesWritten的值，此处的</em>lpNumberOfBytesWritten参数，即对应main函数中的NumberOfBytesWritten关键参数。</p><p>因此，推测<code>sub_401000</code>函数为对于输入的核心判断函数，步入查看：</p><h2 id="sub-401000函数："><a href="#sub-401000函数：" class="headerlink" title="sub_401000函数："></a>sub_401000函数：</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122153313662.png" alt="image-20220122153313662"></p><p>输入为a1；a2为固定值19；</p><p>然后下面的逻辑简单的说就是先加密a1，然后比较数组a1每一位的值和储存在 <strong>byte_40A030</strong>处每一位的值。</p><p>直接逆向分析函数思路，发现奇数位是通过本位推导，但偶数位是通过高位推导，因此第0位是无法被推导出的，而18位可以被推导出两次:</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220122164546365.png" alt="image-20220122164546365"></p><p>脚本如上：猜测第一位是<code>f</code>字符，最终正确。</p><h2 id="汇编跳转函数的总结："><a href="#汇编跳转函数的总结：" class="headerlink" title="汇编跳转函数的总结："></a>汇编跳转函数的总结：</h2><p><a href="https://lhl7.github.io/2022/01/22/%E6%B1%87%E7%BC%96%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/">https://lhl7.github.io/2022/01/22/%E6%B1%87%E7%BC%96%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</a></p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编跳转指令及其十六进制码</title>
      <link href="/2022/01/22/%E6%B1%87%E7%BC%96%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
      <url>/2022/01/22/%E6%B1%87%E7%BC%96%E8%B7%B3%E8%BD%AC%E6%8C%87%E4%BB%A4%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="汇编跳转指令及其十六进制码"><a href="#汇编跳转指令及其十六进制码" class="headerlink" title="汇编跳转指令及其十六进制码"></a>汇编跳转指令及其十六进制码</h1><p>几种跳转指令和对应的机器码：<br>0xE8 CALL后面的四个字节是地址<br>0xE9 JMP后面的四个字节是偏移<br>0xEB JMP后面的二个字节是偏移<br>0xFF15 CALL后面的四个字节是存放地址的地址<br>0xFF25 JMP后面的四个字节是存放地址的地址<br>0x68 PUSH后面的四个字节入栈<br>0x6AP USH后面的一个字节入栈</p><p>————————————————<br>版权声明：本文为CSDN博主「hincon」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/ccworm/article/details/112787439">https://blog.csdn.net/ccworm/article/details/112787439</a></p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Reverse进阶区-BABYRE-writeup</title>
      <link href="/2022/01/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-BABYRE-writeup/"/>
      <url>/2022/01/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-BABYRE-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界Reverse进阶区-BABYRE-writeup"><a href="#攻防世界Reverse进阶区-BABYRE-writeup" class="headerlink" title="攻防世界Reverse进阶区-BABYRE-writeup"></a>攻防世界Reverse进阶区-BABYRE-writeup</h1><p>以此篇WP记录第一次使用ida解决smc（自解密）</p><p>观察反汇编代码：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220118144411257.png" alt="image-20220118144411257"></p><p>第12行调用的函数在第8行被加密了</p><p>因此，需要手动解密观察，双击judge进入：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220118144605050.png" alt="image-20220118144605050"></p><p>然后使用idapython脚本解决，右上角file、script command</p><p>如图编写代码：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220118144725867.png" alt="image-20220118144725867"></p><p>点击run，可以看到内容被改变：</p><p>选中judge函数一行，c（code），将其变成代码，这时的judge被分为三个函数，我们将其合三为1，框选地址<code>B00~BB5</code>（所有红色区域），p（重新生成function）</p><p>此时可以在左侧找到相应函数内容，F5即可</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220118145127875.png" alt="image-20220118145127875"></p><p>然后针对反汇编后的加密算法写一个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v2=[<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="number">127</span>,<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;`&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;p&#x27;</span>]</span><br><span class="line">an=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">14</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">4</span>:</span><br><span class="line">        an+=<span class="built_in">chr</span>(<span class="number">127</span>^i)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    an+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(v2[i])^i)</span><br><span class="line"><span class="built_in">print</span>(an)</span><br></pre></td></tr></table></figure><p>运行结果为：flag{n1c3_j0b}</p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Reverse进阶区-流浪者-writeup</title>
      <link href="/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-%E6%B5%81%E6%B5%AA%E8%80%85-writeup/"/>
      <url>/2022/01/17/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CReverse%E8%BF%9B%E9%98%B6%E5%8C%BA-%E6%B5%81%E6%B5%AA%E8%80%85-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界Reverse进阶区-流浪者-writeup"><a href="#攻防世界Reverse进阶区-流浪者-writeup" class="headerlink" title="攻防世界Reverse进阶区-流浪者-writeup"></a>攻防世界Reverse进阶区-流浪者-writeup</h1><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220117123155980.png" alt="image-20220117123155980"></p><p><strong>关键函数1：sub_401890</strong></p><p>调用了另一个函数</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220117123309787.png" alt="image-20220117123309787"></p><p><strong>关键函数2：sub_4017F0</strong></p><p>先传入关键函数1进行加密，加密后进入函数2进行进一步加密，最后与<code>kanXue...</code>字符串对比查验</p><p>逆向脚本书写逻辑即可</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220117123519559.png" alt="image-20220117123519559"></p><p>最终运行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220117123544490.png" alt="image-20220117123544490"></p>]]></content>
      
      
      <categories>
          
          <category> reserve </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python数据类型以及常用函数（基础）</title>
      <link href="/2022/01/16/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2022/01/16/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="python笔记"><a href="#python笔记" class="headerlink" title="python笔记"></a>python笔记</h1><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li><p><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</p></li><li><h2 id="Python数据类型转换"><a href="#Python数据类型转换" class="headerlink" title="Python数据类型转换"></a>Python数据类型转换</h2><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可，在下一章节 <a href="https://www.runoob.com/python3/python3-type-conversion.html">Python3 数据类型转换</a> 会具体介绍。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">[int(x <a href="https://www.runoob.com/python3/python-func-int.html">,base])</a></td><td align="left">将x转换为一个整数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-float.html">float(x)</a></td><td align="left">将x转换到一个浮点数</td></tr><tr><td align="left">[complex(real <a href="https://www.runoob.com/python3/python-func-complex.html">,imag])</a></td><td align="left">创建一个复数</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-str.html">str(x)</a></td><td align="left">将对象 x 转换为字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-repr.html">repr(x)</a></td><td align="left">将对象 x 转换为表达式字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-eval.html">eval(str)</a></td><td align="left">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-func-tuple.html">tuple(s)</a></td><td align="left">将序列 s 转换为一个元组</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(s)</a></td><td align="left">将序列 s 转换为一个列表</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-set.html">set(s)</a></td><td align="left">转换为可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-dict.html">dict(d)</a></td><td align="left">创建一个字典。d 必须是一个 (key, value)元组序列。</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-frozenset.html">frozenset(s)</a></td><td align="left">转换为不可变集合</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-chr.html">chr(x)</a></td><td align="left">将一个整数转换为一个字符</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-ord.html">ord(x)</a></td><td align="left">将一个字符转换为它的整数值</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-hex.html">hex(x)</a></td><td align="left">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="left"><a href="https://www.runoob.com/python3/python-func-oct.html">oct(x)</a></td><td align="left">将一个整数转换为一个八进制字符串</td></tr></tbody></table></li></ul><h2 id="一、字符串"><a href="#一、字符串" class="headerlink" title="一、字符串"></a>一、字符串</h2><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = ‘m’会导致错误。</p><p>Python 的字符串常用内建函数如下：</p><table><thead><tr><th align="left">序号</th><th align="left">方法及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-capitalize.html">capitalize()</a> 将字符串的第一个字符转换为大写</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-center.html">center(width, fillchar)</a>返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-count.html">count(str, beg= 0,end=len(string))</a> 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-decode.html">bytes.decode(encoding=”utf-8”, errors=”strict”)</a> Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-encode.html">encode(encoding=’UTF-8’,errors=’strict’)</a> 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-endswith.html">endswith(suffix, beg=0, end=len(string))</a> 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-expandtabs.html">expandtabs(tabsize=8)</a> 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-find.html">find(str, beg=0, end=len(string))</a> 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-index.html">index(str, beg=0, end=len(string))</a> 跟find()方法一样，只不过如果str不在字符串中会报一个异常。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalnum.html">isalnum()</a> 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isalpha.html">isalpha()</a> 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdigit.html">isdigit()</a> 如果字符串只包含数字则返回 True 否则返回 False..</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-islower.html">islower()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isnumeric.html">isnumeric()</a> 如果字符串中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isspace.html">isspace()</a> 如果字符串中只包含空白，则返回 True，否则返回 False.</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-istitle.html">istitle()</a> 如果字符串是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isupper.html">isupper()</a> 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-join.html">join(seq)</a> 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-len.html">len(string)</a> 返回字符串长度</td></tr><tr><td align="left">20</td><td align="left">[ljust(width<a href="https://www.runoob.com/python3/python3-string-ljust.html">, fillchar])</a> 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。</td></tr><tr><td align="left">21</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lower.html">lower()</a> 转换字符串中所有大写字符为小写.</td></tr><tr><td align="left">22</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-lstrip.html">lstrip()</a> 截掉字符串左边的空格或指定字符。</td></tr><tr><td align="left">23</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-maketrans.html">maketrans()</a> 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td align="left">24</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-max.html">max(str)</a> 返回字符串 str 中最大的字母。</td></tr><tr><td align="left">25</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-min.html">min(str)</a> 返回字符串 str 中最小的字母。</td></tr><tr><td align="left">26</td><td align="left">[replace(old, new <a href="https://www.runoob.com/python3/python3-string-replace.html">, max])</a> 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。</td></tr><tr><td align="left">27</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rfind.html">rfind(str, beg=0,end=len(string))</a> 类似于 find()函数，不过是从右边开始查找.</td></tr><tr><td align="left">28</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rindex.html">rindex( str, beg=0, end=len(string))</a> 类似于 index()，不过是从右边开始.</td></tr><tr><td align="left">29</td><td align="left">[rjust(width,<a href="https://www.runoob.com/python3/python3-string-rjust.html">, fillchar])</a> 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串</td></tr><tr><td align="left">30</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-rstrip.html">rstrip()</a> 删除字符串末尾的空格或指定字符。</td></tr><tr><td align="left">31</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-split.html">split(str=””, num=string.count(str))</a> 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</td></tr><tr><td align="left">32</td><td align="left">[splitlines(<a href="https://www.runoob.com/python3/python3-string-splitlines.html">keepends])</a> 按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。</td></tr><tr><td align="left">33</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-startswith.html">startswith(substr, beg=0,end=len(string))</a> 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。</td></tr><tr><td align="left">34</td><td align="left">[strip(<a href="https://www.runoob.com/python3/python3-string-strip.html">chars])</a> 在字符串上执行 lstrip()和 rstrip()</td></tr><tr><td align="left">35</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-swapcase.html">swapcase()</a> 将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td align="left">36</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-title.html">title()</a> 返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td align="left">37</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-translate.html">translate(table, deletechars=””)</a> 根据 str 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中</td></tr><tr><td align="left">38</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-upper.html">upper()</a> 转换字符串中的小写字母为大写</td></tr><tr><td align="left">39</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-zfill.html">zfill (width)</a> 返回长度为 width 的字符串，原字符串右对齐，前面填充0</td></tr><tr><td align="left">40</td><td align="left"><a href="https://www.runoob.com/python3/python3-string-isdecimal.html">isdecimal()</a> 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。</td></tr></tbody></table><h2 id="二、列表"><a href="#二、列表" class="headerlink" title="二、列表"></a>二、列表</h2><p>与Python字符串不一样的是，列表中的元素是可以改变的，如 a[2:5] = [13, 14, 15]。</p><p>Python包含以下函数:</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><p>Python包含以下方法:</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left">[list.pop(<a href="https://www.runoob.com/python3/python3-att-list-pop.html">index=-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key=None, reverse=False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td></tr></tbody></table><h2 id="三、字典"><a href="#三、字典" class="headerlink" title="三、字典"></a>三、字典</h2><p>Python字典包含了以下内置函数：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">len(dict) 计算字典元素个数，即键的总数。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125; &gt;&gt;&gt; len(tinydict) 3</code></td></tr><tr><td align="left">2</td><td align="left">str(dict) 输出字典，可以打印的字符串表示。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125; &gt;&gt;&gt; str(tinydict) &quot;&#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Class&#39;: &#39;First&#39;, &#39;Age&#39;: 7&#125;&quot;</code></td></tr><tr><td align="left">3</td><td align="left">type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。</td><td align="left"><code>&gt;&gt;&gt; tinydict = &#123;&#39;Name&#39;: &#39;Runoob&#39;, &#39;Age&#39;: 7, &#39;Class&#39;: &#39;First&#39;&#125; &gt;&gt;&gt; type(tinydict) &lt;class &#39;dict&#39;&gt;</code></td></tr></tbody></table><p>Python字典包含了以下内置方法：</p><table><thead><tr><th align="left">序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-clear.html">radiansdict.clear()</a> 删除字典内所有元素</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-copy.html">radiansdict.copy()</a> 返回一个字典的浅复制</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-fromkeys.html">radiansdict.fromkeys()</a> 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-get.html">radiansdict.get(key, default=None)</a> 返回指定键的值，如果键不在字典中返回 default 设置的默认值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-in.html">key in dict</a> 如果键在字典dict里返回true，否则返回false</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-items.html">radiansdict.items()</a> 以列表返回一个视图对象</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-keys.html">radiansdict.keys()</a> 返回一个视图对象</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-setdefault.html">radiansdict.setdefault(key, default=None)</a> 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-update.html">radiansdict.update(dict2)</a> 把字典dict2的键/值对更新到dict里</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-values.html">radiansdict.values()</a> 返回一个视图对象</td></tr><tr><td align="left">11</td><td align="left">pop(key[<a href="https://www.runoob.com/python3/python3-att-dictionary-pop.html">,default])</a> 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-dictionary-popitem.html">popitem()</a> 返回并删除字典中的最后一对键和值。</td></tr></tbody></table><p>摘抄自：</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于编码方式的总结</title>
      <link href="/2022/01/14/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81/"/>
      <url>/2022/01/14/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="各类编码总结"><a href="#各类编码总结" class="headerlink" title="各类编码总结"></a>各类编码总结</h1><h2 id="一、ascii、UTF-8、gbk"><a href="#一、ascii、UTF-8、gbk" class="headerlink" title="一、ascii、UTF-8、gbk"></a>一、ascii、UTF-8、gbk</h2><h3 id="1、ascii码"><a href="#1、ascii码" class="headerlink" title="1、ascii码"></a>1、ascii码</h3><p>ASCII 码一共规定了128个字符的编码：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/v2-976d8be2a77238a37736be97bac66497_r.jpg" alt="preview"></p><h3 id="2、UTF-8、UTF-16、UTF-32"><a href="#2、UTF-8、UTF-16、UTF-32" class="headerlink" title="2、UTF-8、UTF-16、UTF-32"></a>2、UTF-8、UTF-16、UTF-32</h3><p><em>utf（Unicode Transformation Format）</em></p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8:"></a>UTF-8:</h4><p>​    utf-8是unicode的实现方法。其编码规则如下：</p><blockquote><p>1）对于单字节的符号：字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的；</p><p>2）对于n字节的符号（n &gt; 1）：第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/v2-6c143515986d542f67de787d85131ea9_r.jpg" alt="preview"></p><p><strong>举例说明：</strong></p><p>选择汉字“鲁”，在<code>unicode</code>官网查询其编码为<code>U+9C81</code></p><p>转换为二级制数字即为：1001 1100 1000 0001，大小两字节。</p><p>​    根据上表，“鲁”字在第三个范围内，其表示即为1110xxxx 10xxxxxx 10xxxxxx，故将前文中的二进制数字填入，即为：11101001 10110010 10000001，再转换为十六进制，即为E9B281。</p><p><strong>特征码：</strong></p><p><em>BOM（byte order mark）</em></p><p>​    在较早的Windows环境下，系统为了能够识别UTF-8这一编码格式，为UTF-8添加了<u>代表其格式的EF BB BF三位特征码（BOM）</u>，而后较高的Windows版本中，系统默认使用UTF-8这一编码格式，不再添加特征码(BOM)。经实验，若将XP环境下创建的、带有BOM的文件在Win10下打开，右下角会显示“带有BOM的UTF-8”字样，文件依然可以正常操作。</p><p><strong>优点、缺点</strong></p><p>缺点：</p><pre><code> 1. 英语国家用起来省空间，其他国家（语言）反而更费空间（汉字有可能需要三个字节） 2. 变长的储存方式导致执行索引效率低，有时需要转化为`UTF-16`或者`UTF-32`</code></pre><p>优点：</p><pre><code>1. 字符空间大于UTF-16；2. 不存在大小端序；3. 容错率高，容易检查出错误；</code></pre><h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16:"></a>UTF-16:</h4><p>即，使用两字节表示unicode的编码方法，有以下几个问题：</p><ol><li>大小端序的设置容易导致乱码；</li><li>两字节只能表示六万多个字符，不够用；</li><li>容错低，一处出错，后面全错；</li></ol><p><strong>端序：</strong></p><p>指字符按照什么顺序储存，与编码后内容一样即大端序，相反则小端序。</p><p>试举一例，一个“奎”的Unicode编码是594E，“乙”的Unicode编码是4E59。如果我们收到UTF-16字节流“594E”，那么这是“奎”还是“乙”？如果BOM是大端序，那么代码点就应该是594E，那么就是“奎”，如果BOM是小端序，那么代码点就应该是4E59，就是“乙”了。</p><h4 id="UTF-32："><a href="#UTF-32：" class="headerlink" title="UTF-32："></a>UTF-32：</h4><p>使用四字节表示Unicode的编码方式，占空间比较大。</p><h4 id="特征码（附）："><a href="#特征码（附）：" class="headerlink" title="特征码（附）："></a>特征码（附）：</h4><blockquote><p>有编码对应的开头标志：</p><p><code>EF BB BF        UTF-8 FE FF            UTF-16/UCS-2, little endian FF FE            UTF-16/UCS-2, big endian FF FE 00 00        UTF-32/UCS-4, little endian. 00 00 FE FF        UTF-32/UCS-4, big-endian.</code></p></blockquote><h3 id="3、GBK-GB2312"><a href="#3、GBK-GB2312" class="headerlink" title="3、GBK/GB2312"></a>3、GBK/GB2312</h3><blockquote><p>​    GB全称GuoBiao国标，GBK全称GuoBiaoKuozhan国标扩展。GB18030编码兼容GBK，GBK兼容GB2312，其实这三种编码有着非常深厚的渊源，我们放在一起进行比较。 【GB2312】最早一版的中文编码，每个字占据2bytes。由于要和ASCII兼容，那这2bytes最高位不可以为0了(否则和ASCII会有冲突)。在GB2312中收录了6763个汉字以及682个特殊符号，已经囊括了生活中最常用的所有汉字。</p></blockquote><p>​    总结来说，GBK就是两个字节组成的汉字字符集，同时其通过不让第一个字节为0的方式来兼容ascii码。实际上，有很多比较生僻的名字打不出来就是由于未被GB2312收录的原因。</p><p><strong>全角&amp;半角</strong>：</p><p>在GBK中，也收录了一些数字和字母，即ascii表中有的字母和数字，被GBK又收录了一遍。</p><p><u>那么，当我们直接使用ASCII码，用一个字节来表示数字和字母，就称之为<strong>半角</strong>；</u></p><p><u>若使用GBK中收录的那份数字和字母，用两个字节来表示数字和字母，就称之为<strong>全角</strong>；</u></p><p>通常我们使用半角，因为全角可能在编程过程中导致编译器不认识。</p><p><strong>big5</strong></p><p>big5是台湾搞出来的一种包括繁体的编码方式，与GBK不兼容。</p><p><strong>GB18030</strong></p><p>为了收录比GBK还多的汉字，使用四个字节来表示一个汉字，越来越复杂。</p><p>​    由于汉字编码方式不断迭代，迭代的同时又要保持兼容，GBK和GB2312比ASCII多出来的字都是2bytes，GB18030比GBK多出来的字都是4bytes，而ASCII、GB2312、GBK、GB18030直接有需要保持兼容性，最终就形成了被人诟病的国标汉字编码形式，具体可以参考下图：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/20645acf6cdf2aa38922bcfbeb676922.png" alt="20645acf6cdf2aa38922bcfbeb676922.png"></p><h2 id="二、乱码的来源"><a href="#二、乱码的来源" class="headerlink" title="二、乱码的来源"></a>二、乱码的来源</h2><h3 id="1、Unicode与国标的不兼容性"><a href="#1、Unicode与国标的不兼容性" class="headerlink" title="1、Unicode与国标的不兼容性"></a>1、Unicode与国标的不兼容性</h3><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/a74eccea4783314561c09e8b3100eb65.png" alt="a74eccea4783314561c09e8b3100eb65.png"></p><p>只兼容ASCII部分。</p><h3 id="2、锟斤拷"><a href="#2、锟斤拷" class="headerlink" title="2、锟斤拷"></a>2、锟斤拷</h3><p>虽然<code>Unicode</code>号称万国码，但是依然有未收录的字符，同时每个地区或操作系统对字符的支持程度也是不同的，因此在<code>Unicode</code>中就有一个特殊字符来代表未知字符：�</p><p>它的<code>Unicode</code>编码为<code>0xFFFD</code>。</p><p>将其<code>Unicode</code>编码转化为<code>UTF-8</code>后，十六进制表示为<code>0xEF 0XBF 0XBD</code></p><p>若同时出现两个乱码符号，转化为十六进制就是<code>0xEF 0XBF 0XBD 0xEF 0XBF 0XBD</code></p><p>这时候再将其强行转码为<code>GBK</code>编码，因为GBK中用两个字节表示一个字符，那么上述的字符就成了<strong>锟</strong>（0xEFBF），<strong>斤</strong>（0xBDEF），<strong>拷</strong>（0xBFBD）。</p><h3 id="3、烫烫烫、屯屯屯、葺葺葺（qi四声）"><a href="#3、烫烫烫、屯屯屯、葺葺葺（qi四声）" class="headerlink" title="3、烫烫烫、屯屯屯、葺葺葺（qi四声）"></a>3、烫烫烫、屯屯屯、葺葺葺（qi四声）</h3><p>Visual Studio中，未初始化的栈空间（即静态分配的空间）用0xCC填充，而未初始化的堆空间（即动态分配的空间）用0xCD填充。</p><p>而0xCCCC和0xCDCD在中文GB2312编码中分别对应“烫”字和“屯”字。</p><p>如果一个字符串没有结束符’\0’，输出时就会打印出未初始化的栈或堆空间的内容，这就是大名鼎鼎的“烫烫烫”、“屯屯屯”乱码。</p><p>而分配了，又被删除的内存，使用0xDDDD来填充，对应“葺”字。</p><h2 id="三、base-XX编码是什么"><a href="#三、base-XX编码是什么" class="headerlink" title="三、base XX编码是什么"></a>三、base XX编码是什么</h2><h3 id="1、base-64、32、16编码流程"><a href="#1、base-64、32、16编码流程" class="headerlink" title="1、base 64、32、16编码流程"></a>1、base 64、32、16编码流程</h3><p>例如要被编码的字符串是：<code>ILU</code></p><ol><li><p>第一步：将 <code>ILU</code> 字符串中的每一个字符转为对应于 <code>Ascii</code> 编码表的值，I = 73, L = 76, U = 85。</p></li><li><p>第二步：将第一步中的 <code>Ascii</code> 值分别转为对应的<code>二进制</code>格式，要求必须是造成<code>8bit</code>，不足8比特位高位补0。例如：1 的二进制是 1，明显不够8位，最终应该显示为:<code>0000 0001</code>。<code>ILU</code> 的转化结果以下：</p><blockquote><p>73 = 01001001</p></blockquote><blockquote><p>76 = 01001100</p></blockquote><blockquote><p>85 = 01010101</p></blockquote></li><li><p>第三步：根据<code>base X</code>(这里的 X 表明 16，32，64等编号) 编码算法中所指定的<code>y 个 bit 位为一个字符在表格中的下标</code> 的规则，对第2步的进行划分。例如 <code>base 16</code>的规则要求，4位做为一个下标对应一个字符，即每4个位为一部分，故划分以下：</p><blockquote><p>第1部分：0100 是 (73 = 01001001，的前4个位)</p></blockquote><blockquote><p>第2部分：1001 是 (73 = 01001001，的后4个位)</p></blockquote><blockquote><p>第3部分：0100</p></blockquote><blockquote><p>第4部分：1100</p></blockquote><blockquote><p>第5部分：0101</p></blockquote><blockquote><p>第6部分：0101</p></blockquote></li><li><p>第四步：将第三步中划分出的<code>每一个部分</code>进行<code>10进制转换</code>，得出对应于10进制数的<code>下标值</code>，以下：</p><blockquote><p>0100 = 4，1001 = 9，4，12，5，5</p></blockquote></li><li><p>第五步：最后一步，将第4步中得出的<code>下标数</code>去<code>查表</code>，得出对应的字符，<code>连在一块儿，就是编码结果</code></p></li></ol><p>​    总结来说，对于16、32、64的<code>base X</code>编码，将内容转化为二进制，分别按<code>4、5、6</code>位分组，然后转化为字符形式即可，其中：</p><table><thead><tr><th align="center">名称</th><th align="left">下标数字的位个数</th><th align="left">编码表字符串</th><th align="left">位数不足是否会补全 =</th></tr></thead><tbody><tr><td align="center">base 16</td><td align="left">4</td><td align="left">数字0<del>9 和 字母 A</del>F</td><td align="left">不会，位数恰好是 4 的倍数</td></tr><tr><td align="center">base 32</td><td align="left">5</td><td align="left">大写字母A<del>Z 和 数字2</del>7</td><td align="left">会</td></tr><tr><td align="center">base 64</td><td align="left">6</td><td align="left">大写字母A<del>Z，小写字母a</del>z，数字0~9以及”+”，”/“</td><td align="left">会</td></tr></tbody></table><p>​    在编码后，base 16的字符数量会变为两倍；base 32会变为5/8倍；base 64会变为4/3倍。</p><h3 id="2、对base-2-n-编码尝试进行计算"><a href="#2、对base-2-n-编码尝试进行计算" class="headerlink" title="2、对base 2^n 编码尝试进行计算"></a>2、对base 2^n 编码尝试进行计算</h3><p>以字符串<code>Lhl_2507</code>为例：</p><p>以<code>utf-8</code>的形式编码为<code>十六进制</code>：<code>4c686c5f32353037</code>；</p><p>转化为二进制数：<code>0100 1100 0110 1000 0110 1100 0101 1111 0011 0010 0011 0101 0011 0000 0011 0111</code>；</p><p>然后分别按照4、5、6位分组：</p><p>​    其中base 16的结果就等同于<code>utf-8</code>的十六进制格式：<code>4c686c5f32353037</code>；</p><p>​    按照<code>五位</code>分组：<code>01001 10001 10100 00110 11000 10111 11001 10010 00110 10100 11000 00011 0111</code></p><p>​    按照<code>A~Z 2~7</code>分别对应<code>0~31</code>(五位二进制转十进制)，进行转化：<code>JRUGYXZSGUYD</code>为前十二位</p><p>​    最后一位需要补全，先补<code>0</code>变为二进制<code>01110</code>对应base 32中的<code>O</code></p><p>​    为了与十六进制统一，需要补充<code>=</code>作为字符数量，前面<code>5*4=20</code>的组合有三组，最后多余一组，因此补充三个<code>=</code></p><p>​    最终结果为<code>JRUGYXZSGUYDO===</code></p><p>​    base 64与base 32思路相同</p><p>​    其64位数分别对应<code> A~Z a~z 0~9 + /</code>用来对应0~63的十进制数</p><p>​    转化结果为<code>TGhsXzI1MDc=</code></p><h3 id="3、非2-n的base-XX编码"><a href="#3、非2-n的base-XX编码" class="headerlink" title="3、非2^n的base XX编码"></a>3、非2^n的base XX编码</h3><h4 id="base-58编码："><a href="#base-58编码：" class="headerlink" title="base 58编码："></a>base 58编码：</h4><blockquote><p>​    base58编码去掉了几个看起来会产生歧义的字符，如 0 (零), O (大写字母O), I (大写的字母i) and l (小写的字母L) ，和几个影响双击选择的字符，如/, +。结果字符集正好58个字符(包括9个数字，24个大写字母，25个小写字母)。</p><p>​    同时，由于58 不是2的整次幂，所以无法使用类似base64编码中使用直接截取3个字符转4个字符（3*8=4*6 , 2的6次方刚好64）的方法进行转换，而是采用我们数学上经常使用的进制转换方法——辗转相除法（本质上，base64编码是64进制，base58是58进制）。看下base58的编码表：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/20180620000601834" alt="img"></p><p>​    试举一例，若要将<code>Lhl</code>字符在utf-8编码下转化为base 58的形式：</p><p>​    转化为十六进制：<code>4c686c</code></p><p>​    十六进制转十进制：<code>5007468</code></p><p>​    十进制转58进制：辗转相除，然后将<code>58进制数字</code>转化为上表的表示形式即可。</p><p>​    结果为：<code>E3QvX8qx</code></p><h4 id="base-91编码："><a href="#base-91编码：" class="headerlink" title="base 91编码："></a>base 91编码：</h4><blockquote><p>​    base91是一种将二进制数据编码为ASCII字符的高级方法。它类似于uuencode或base64，但效率更高。base91产生的开销取决于输入数据。它的数量最多为23%（而base64为33%），其范围可以降低到14%，这通常发生在0字节块上。这使得base91在通过电子邮件或终端线路等二进制不安全连接传输较大文件时非常有用。</p><p>​    顾名思义，base91需要91个字符来表示用ASCII编码的二进制数据。在94个可打印的ASCII字符（0x21-0x7e）中，以下三个字符被省略以构建base91字母表：</p><p>​    -（破折号，0x2d）</p><p>​    \（反斜杠，0x5C）</p><p>​    ‘（撇号，0x27）</p><p>​    翻译表由如下所示的其余字符组成。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/20190816091541986.png" alt="img"></p><p>引用（参考）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[01]: http://www.hiencode.com/&quot;站长工具，用于转化编码&quot;</span><br><span class="line">[02]: https://blog.csdn.net/instruder/article/details/5963344&quot;base 32编码&quot;</span><br><span class="line">[03]: http://www.javashuo.com/article/p-ombqwauc-dc.html&quot;base16，base32，base64 编码方式的通俗讲解&quot;</span><br><span class="line">[04]: https://blog.csdn.net/idwtwt/article/details/80740474&quot;base58编码原理和实现&quot;</span><br><span class="line">[05]: https://blog.csdn.net/qq_42777804/article/details/99671341&quot;bugku 贝斯家族 （base91参照表）&quot;</span><br><span class="line">[06]: https://zhuanlan.zhihu.com/p/38333902&quot;字符编码那点事&quot;</span><br><span class="line">[07]: https://blog.csdn.net/weixin_30898967/article/details/113073386&quot;帮你彻底弄懂常见的中文字符编码&quot;</span><br><span class="line">[08]: https://www.zhihu.com/question/36899383&quot;为什么乱码总是写“屯屯屯屯屯屯屯”或是“烫烫烫烫烫烫”？&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pikachu_命令执行</title>
      <link href="/2022/01/11/PIKACHU%E9%80%9A%E5%85%B3_DAY2_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/01/11/PIKACHU%E9%80%9A%E5%85%B3_DAY2_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="PIKACHU通关-命令执行"><a href="#PIKACHU通关-命令执行" class="headerlink" title="PIKACHU通关_命令执行"></a>PIKACHU通关_命令执行</h1><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口。<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 但是如果设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器。</p><h2 id="命令连接符"><a href="#命令连接符" class="headerlink" title="命令连接符"></a>命令连接符</h2><p>windows系统和<a href="https://so.csdn.net/so/search?q=linux">linux</a>系统各有4个，其中3个是共有的，各有1个是特有的：</p><ul><li>windows系统：| 、||、&amp;&amp;、&amp;</li><li>linux系统：| 、||、&amp;&amp;、;</li></ul><p>总结一下各连接符号的作用：</p><ol><li> |    管道符，用于把前一个命令的输出作为下一个命令的输入；</li><li> || 逻辑或，只有前一个命令成功，后一个就不执行，反之后一个执行；</li><li> &amp;&amp;逻辑与，只有前一个执行成功才执行后一个，否则不执行；</li><li> &amp; Windows独有，顺序执行每一条命令；</li><li> ；Linux独有，顺序执行每一条命令；</li></ol><h2 id="测试常用命令"><a href="#测试常用命令" class="headerlink" title="测试常用命令"></a>测试常用命令</h2><p><code>whoami</code>命令（Who am i），用于区分Windows和Linux环境：</p><p>（前者有两个参数，用”\“隔开，后者只显示用户名）</p><h2 id="PIKACHU-exec’ping’"><a href="#PIKACHU-exec’ping’" class="headerlink" title="PIKACHU_exec’ping’"></a>PIKACHU_exec’ping’</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111170123070.png" alt="image-20220111170123070"></p><p>没有任何过滤，随便乱杀。</p><h2 id="PIKACHU-exec’eval’"><a href="#PIKACHU-exec’eval’" class="headerlink" title="PIKACHU_exec’eval’"></a>PIKACHU_exec’eval’</h2><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111210928950.png" alt="image-20220111210928950"></p><p>一样没有任何过滤，可以直接使用<code>phpinfo();</code>进行测试，</p><p>或者构造payload<code>fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php assert($_POST[lhl_2507]);?&gt;&#39;);</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pikachu_暴力破解</title>
      <link href="/2022/01/11/PIKACHU%E9%80%9A%E5%85%B3_DAY1_%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2022/01/11/PIKACHU%E9%80%9A%E5%85%B3_DAY1_%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="PIKACHU通关-暴力破解"><a href="#PIKACHU通关-暴力破解" class="headerlink" title="PIKACHU通关_暴力破解"></a>PIKACHU通关_暴力破解</h1><p>暴力破解需要将表单传到 <strong>Intruder</strong>(入侵者)模块</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111100429372.png" alt="image-20220111100429372"></p><p>在这里记录一下四种四种<strong>AttackType</strong>:</p><ul><li><p><strong>Sinper</strong>（狙击手）:</p><p>输入一个字典，分别对每一个被标记的位置用此字典遍历。</p></li><li><p><strong>Battering ram</strong>（攻城槌）：</p><p>输入一个字典，同时对每一个被标记的位置用此字典遍历。</p></li><li><p><strong>Pitchfork</strong>（干草叉）</p><p>输入多个字典，按照顺序，从上到下对应遍历。（以最短的字典长度为遍历次数）</p></li><li><p><strong>Cluster bomb</strong>（集束炸弹）</p><p>输入多个字典，遍历所有可能性，排列组合。</p></li></ul><h2 id="第一关——普通爆破"><a href="#第一关——普通爆破" class="headerlink" title="第一关——普通爆破"></a>第一关——普通爆破</h2><p>回到暴力破解，我们使用<strong>Cluster bomb</strong>进行字典爆破：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111103021323.png" alt="image-20220111103021323"></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111103527752.png" alt="image-20220111103527752"></p><p>分别对用户名和密码的爆破上传字典，<strong>若用户名和密码有特殊字符需求，不勾选URL-encoding:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111103740053.png" alt="image-20220111103740053"></p><p>点击开始爆破，观察返回报文的长短即可。</p><h2 id="第二关——绕过验证码（ON-SERVER）"><a href="#第二关——绕过验证码（ON-SERVER）" class="headerlink" title="第二关——绕过验证码（ON SERVER）"></a>第二关——绕过验证码（ON SERVER）</h2><p><strong>观察：</strong></p><p>发现页面首先验证验证码的正确性，然后验证用户名和密码。</p><p>同时进行抓包，发现验证码是后端验证。</p><p>但是本关的问题在于，只要不点击网页上的login按钮，验证码就不会刷新，因此使用发包的方式一直爆破即可。</p><p><strong>源码分析：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111111050870.png" alt="image-20220111111050870"></p><p>其一，在验证后，应重置验证码。</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111111359414.png" alt="image-20220111111359414"></p><p>其二，不应将验证码作为cookie返回前端</p><h2 id="第三关——绕过验证码（ON-CLIENT）"><a href="#第三关——绕过验证码（ON-CLIENT）" class="headerlink" title="第三关——绕过验证码（ON CLIENT）"></a>第三关——绕过验证码（ON CLIENT）</h2><p>右键查看源代码：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111144849999.png" alt="image-20220111144849999"></p><p>发现验证码在前端验证。</p><h2 id="第四关——token防止爆破"><a href="#第四关——token防止爆破" class="headerlink" title="第四关——token防止爆破"></a>第四关——token防止爆破</h2><p>添加了token防止爆破，抓包进行观察，可以发现返回的包中含有下一次的token值。</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111145923138.png" alt="image-20220111145923138"></p><p>因此，我们使用正则提取出token强行爆破：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111150453621.png" alt="image-20220111150453621"></p><p>使用正则表达式（Recursive grep）进行匹配，正则添加方法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/lhl7/My_pics/Typora/image-20220111150832658.png" alt="image-20220111150832658"></p><p>可以使用右边的Refetch response按钮确认报文中有多少符合此正则的位置。</p><p>因此可见，使用token防爆破还是没啥用。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nmap使用笔记</title>
      <link href="/2022/01/08/Nmap%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/08/Nmap%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="NMAP使用笔记"><a href="#NMAP使用笔记" class="headerlink" title="NMAP使用笔记"></a>NMAP使用笔记</h1><p>NMAP的作用是在信息收集阶段进行端口扫描。</p><h2 id="一、端口扫描："><a href="#一、端口扫描：" class="headerlink" title="一、端口扫描："></a>一、端口扫描：</h2><p>要给sudo权限</p><p><code>namp xx.com -p 80 -sS</code>（syn扫描方式）</p><p>此外还有-sS/sT/sA/sW/sM 分别对应SYN/Connect()/ACK/window/Maimon</p><p>-sU对应UDP</p><p>-sN/sF/sX对应TCP null/FIN/Xmas</p><p>加 <code>-sV -O</code>可以扫描主机版本 ，操作系统等等信息</p><p><code>namp xx.com -p 80 -A</code>效果相同（推荐） </p><p>扫描所有端口：<code>namp xx.com -A -sS</code>(不讲武德，推荐) </p><p>使用<code> -iR</code>随机扫描域名</p><p>扫描五个最常见的端口 <code>nmap xx.com --top-ports 5</code></p><p>输出到文件<code>-oN [文件路径+文件名]</code></p><p>脚本扫描<code>--script=[文件路径./...+文件名]</code></p><h2 id="二、防火墙欺骗："><a href="#二、防火墙欺骗：" class="headerlink" title="二、防火墙欺骗："></a>二、防火墙欺骗：</h2><p><code>-D1.1.1.1,2.2.2.2</code>冒充其他IP发包（伪造IP）</p><p><code>-g996</code>冒充其他源端口号（伪造端口）</p><p><code>--spoof-mac [MAC地址]</code>冒充其他mac地址</p><p><code> namp -iflist</code>输出正在使用的网络信息</p><p>还可以使用空闲扫描，使用网络上其他的空闲主机进行扫描：</p><p>先发现空闲主机：<code>sudo nmap --script ipedseq -iR 1000 -oN ipidseq.txt</code>(扫描一千个主机，输出到文件)</p><p>扫描结束后，使用空闲主机的ip和端口，使用命令：</p><p><code>nmap -Pn -sI [空闲IP:空闲端口] [目标IP]</code></p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Kali安装</title>
      <link href="/2022/01/06/kali%E8%A3%85%E6%9C%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/01/06/kali%E8%A3%85%E6%9C%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="kali装机过程"><a href="#kali装机过程" class="headerlink" title="kali装机过程"></a>kali装机过程</h2><p>磁盘管理</p><p>设别管理器</p><p>系统信息</p><p>下载系统iso文件 rufus 3.14 将内容刻录到u盘</p><p>关机开机后，按住F1</p><p>进入bios窗口，选Security  进入Security Boot 将Secure Boot改为Disabled</p><p>F10退出 按住F12 进入Boot Menu 选使用用来装机的USB设备，回车</p><p>进入kali界面，卡了一下，等待</p><p>图形化安装，选择语言和国家</p><p>安装完毕后，连接WIFI</p><p>磁盘分区，选择整个磁盘（前提是备份电脑中的所有内容），选择电脑（最大的）的磁盘</p><p>放在同一分区下，确定后选择“是”要更改</p><p>最后一步，直接重启，先不拔出USB</p><p>拔出USB后，需要对u盘重新分区，使用windows的diskpart命令和磁盘管理。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/04/hello-world/"/>
      <url>/2022/01/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
